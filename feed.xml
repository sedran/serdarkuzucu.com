<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Serdar Kuzucu</title>
    <description>Serdar Kuzucu'nun kişisel blogu. Java, Javascript, Programlama ve birçok teknik konu üzerine kafa patlatmaca.
</description>
    <link>https://serdarkuzucu.com/</link>
    <atom:link href="https://serdarkuzucu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 12 Feb 2025 00:18:14 +0000</pubDate>
    <lastBuildDate>Wed, 12 Feb 2025 00:18:14 +0000</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Tekrar Merhaba</title>
        <description>&lt;p&gt;Uzun bir aradan sonra, tekrar merhaba!
Bu yazıda merak edenlere hayatımda bu süre içerisinde olup bitenleri kısaca özetliyor ve 
blogda her an meydana gelebilecek olası bir format değişikliğinden önce sizleri uyarıyorum.&lt;/p&gt;

&lt;!--more--&gt;

&lt;hr /&gt;

&lt;p&gt;Bu yazıdan önceki son yazımı Mayıs 2021’de &lt;a href=&quot;/2021/05/18/unit-test-nedir/&quot;&gt;Unit Test serisi&lt;/a&gt; altında yazmıştım.
Henüz Türkiye’de, bir önceki işim &lt;a href=&quot;https://inomera.com/&quot;&gt;Inomera&lt;/a&gt;‘da çalışıyordum ve başka şirketlerle iş görüşmelerine başlamamıştım.
2021 senesinin sonunda epey yoğun bir şekilde yurt dışı şirketlerle mülakatlara başladım ve 2022 senesinin başlarında Amazon’dan aldığım teklifi kabul ettim.
Temmuz 2022 senesinde Londra’ya taşındık ve Amazon’da çalışmaya başladım.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/hello-again/london.jpg&quot; alt=&quot;Banner&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Londra’yı keşfetme, buradaki arkadaşlarla sosyalleşme, iş yoğunluğu vs derken zaman çok hızlı geçti ve blog’u neredeyse unuttum.
Blog’u HTML’e çevirip canlıya alan travisci’daki süreci &lt;a href=&quot;https://github.com/sedran/serdarkuzucu.com/actions&quot;&gt;Github Actions&lt;/a&gt;‘a taşınma işini bir ara yapmışım ama mesela yazılara yorum yapma özelliğini unutmuşum.
Epeydir yazıların altında bir yorum formu bile yok ama ben fark etmemişim :)&lt;/p&gt;

&lt;p&gt;2022 senesi bu şekilde geçerken 2023 senesi geldi. Bu seneye dair aklımda kalan en önemli şey eşimin hamileliği oldu.
Oğlumuzun kalp atışını da ilk defa doğum günümde Londra’daki özel bir Türk kliniğinde duyma şansını yakaladım. 
Londra’ya bir şekilde yolu düşen Türk arkadaşların ihtiyacı olursa diye buraya web adreslerini bırakayım: &lt;a href=&quot;https://www.medstar.app/&quot;&gt;Medstar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2024 senesinin Ocak ayında ise oğlumuz Ege ile sonunda yüz yüze tanışabildik.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/hello-again/fatherhood.jpg&quot; alt=&quot;Banner&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bu tarihten itibaren özel hayatımda bırakın blog yazmayı, whatsapp mesajlarına dönmeyi unuttuğum oldu.
Evlat sahibi olmak nasıl hem dünyanın en güzel hem de en yorucu şeyi ailecek deneyimlemiş olduk.
Ege’nin varlığıyla dünyadaki geri kalan her şey artık benim için ikinci plandan sekizinci veya dokuzuncu plana düşmüş bulunmaktadır.
Bir kez daha iyi ki doğdun oğlum.&lt;/p&gt;

&lt;p&gt;Ve gelgelelim sene 2025 olmuş. Artık yavaş yavaş tekrar akşamları bilgisayar başına oturmaya başlıyorum.
“Uzun zamandır yoktum biri demiş öldü, şimdi de yazsınlar kral geri döndü.” gibi iddialı bir laf edecek kadar bir varlık göstereceğimi sanmıyorum.
Bir önceki blog yazımı yazdığım zamanlarda insanlar o tür teknik içeriklere çoğunlukla Google’dan ulaşıp okurlardı.
Şimdilerde ben çoğu sorumu Google yerine LLM’lere soruyorum ve insanların da artık yavaş yavaş buna adapte olduğunu varsayıyorum.
Bu da uzun uzun teknik yazılar yazma veya giriş seviyesi bilgiler paylaşma hevesimi kırıyor.
Artık bizim yazdıklarımız son kullanıcıya mı hitap ediyor yoksa yapay zekayı eğiten içeriklerden mi oluyor bilemiyorum.&lt;/p&gt;

&lt;p&gt;Velhasıl kelam, önümüzdeki günlerde ara ara tekrar bir şeyler yazmayı deneyebilirim fakat söz veremem.
Konseptimi de birazcık değiştirip artık uzun teknik yazılar yerine kısa kısa bilgiler paylaşabilirim.
Bunlar da daha çok tuttuğum notların temize çekilmesi gibi görülebilir.&lt;/p&gt;

&lt;p&gt;Amazon kariyerimde birçok yeni şey deneyimleme fırsatım oldu.
Bunlardan en önemlilerinin de AWS’de bulunan birçok servisi bir şekilde kullanma fırsatı bulmam, ucundan kıyısından ML dünyasına giriş yapmam
ve Python dilini öğrenmem olduğunu düşünyorum. 
Amazon kültürünü yerinde deneyimlemek ve birçok yetenekli insanla birlikte çalışmak da benim için çok büyük bir artı oldu.
İlerleyen zamanlarda bu blogda pek aşina olmadığımız Python dilinde kodlara ve AWS terminolojisine denk gelme ihtimalimiz oldukça yüksek!&lt;/p&gt;

&lt;p&gt;Daha fazla uzatmadan tekrar merhaba ve görüşmek üzere diyorum ve bu yazıyı kapatıyorum. Sağlıcakla!&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Feb 2024 23:11:50 +0000</pubDate>
        <link>https://serdarkuzucu.com/2025/02/11/tekrar-merhaba/</link>
        <guid isPermaLink="true">https://serdarkuzucu.com/2025/02/11/tekrar-merhaba/</guid>
        
        
        <category>Genel</category>
        
      </item>
    
      <item>
        <title>Unit Test 05: Test Edilebilir Yazılım Nasıl Geliştirilir?</title>
        <description>&lt;p&gt;“Unit Test” yazı dizisinin bir önceki yazısında
kaliteli unit test nasıl yazılır konusunu incelemiştik.
Bu yazıda da test edilebilir yazılımlar nasıl tasarlanır sorusuna cevap arayacağız.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Unit test yazmaya başlayıncaya kadar oldukça kaliteli kod yazdığımı zannederdim.
Artık yazamadığımı biliyorum.&lt;/p&gt;

&lt;p&gt;Bir koda unit test yazamama durumu kodun yeteri kadar kaliteli olmadığını adeta bağıran bir durumdur.
Aşağıda yazılımı unit test yazılması zor veya imkansız hale getirebilecek
birkaç faktöre ve olası çözümlerine değineceğiz.&lt;/p&gt;

&lt;h3 id=&quot;sınıfların--fonksiyonların-fazla-sorumluluk-yerine-getirmesi&quot;&gt;Sınıfların / Fonksiyonların Fazla Sorumluluk Yerine Getirmesi&lt;/h3&gt;

&lt;p&gt;Legacy projelerde bazen yüzden fazla satırdan oluşan metodlar içeren sınıflara test yazmak zorunda kaldığım oluyor.
Test metodu çoğunlukla test edilen metoddan da uzun oluyor.
Böyle sınıflara test yazmak hem çok uzun sürüyor hem de çok fazla veri oluşturmak,
çok fazla bağımlılığı mock olarak tanımlamak,
onlarca farklı koşula belki yüzlerce test yazmak gerekiyor.&lt;/p&gt;

&lt;p&gt;Bu tür sınıflar genellikle çok da fazla değişim geçirdiklerinden,
her bir değişiklikte bir anda yüzlerce testin hata vermeye başlaması ve test bakım maliyeti çıkıyor.&lt;/p&gt;

&lt;p&gt;Sınıflarımızı &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID&quot;&gt;SOLID&lt;/a&gt;
prensiplerini göz önünde bulundurarak tasarlamamız gerekiyor.
Özellikle de &lt;strong&gt;SOLID&lt;/strong&gt;‘in &lt;strong&gt;S&lt;/strong&gt;‘sine, yani “Single-responsibility” prensibine dikkat etmemiz gerekiyor:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Bir sınıfın sadece bir sorumluluğu olmalı, bir sınıfın değişmek için sadece bir sebebi olmalı.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bunu başarabilmek için de sınıflarımızı tasarlarken tüm kodu bir dosyaya yazmak yerine
tekrar kullanılabilir parçalar halinde tasarlamamız gerekiyor.
Böylece testlerde bazı parçaları test edip bazı parçaları sahte/mock implementasyonlar ile izole edebiliriz.&lt;/p&gt;

&lt;p&gt;Tekrar kullanılabilir yazılım bileşenleri üretebilmenin en şık yolu da
genellikle doğru tasarım şablonlarını
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern#Classification_and_list&quot; target=&quot;_blank&quot;&gt;Design Patterns&lt;/a&gt;)
bulup kullanmaktan geçiyor.
Yazılımcıların tasarım şablonlarına hakim olması kaliteli yazılım geliştirmede önemli bir basamak.&lt;/p&gt;

&lt;h3 id=&quot;gereğinden-fazla-statik-kod-kullanımı&quot;&gt;Gereğinden Fazla Statik Kod Kullanımı&lt;/h3&gt;

&lt;p&gt;Statik kod zehirlidir. Birazı kafa yapar, fazlası projeyi öldürür.
Pek kıymetli &lt;a href=&quot;https://www.linkedin.com/in/akinkaldiroglu/&quot; target=&quot;_blank&quot;&gt;Akın Kaldıroğlu&lt;/a&gt;
hocamın da söylediği gibi
“&lt;a href=&quot;http://www.javaturk.org/statik-metotlu-sinif-mi-yoksa-singleton-mi-ii/&quot; target=&quot;_blank&quot;&gt;Statik kullanımı bulaşıcıdır&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;Bu statik kodların gereksiz yerlerde kullanılmaya başlanması
veya dozunun ayarlanamaması projede
&lt;a href=&quot;https://en.wikipedia.org/wiki/Inversion_of_control&quot; target=&quot;_blank&quot;&gt;IoC (Inversion of Control)&lt;/a&gt;
prensibi kullanımını minimuma düşürür.&lt;/p&gt;

&lt;p&gt;Bir API isteğini aldıktan sonra servis katmanı, iş mantığı, cache yapısı ve DAO (veritabanı) katmanının
tamamen statik metodlar üzerinden yapıldığı bir projeye denk geldim yakın zamanda.
Bu tip bir projede unit test yazmaya kalkarsanız kanser olabilirsiniz.
Neredeyse hiçbir katman bir diğerini tamamen çalıştırmadan test edilemiyor.&lt;/p&gt;

&lt;p&gt;Statik metod kullanımını yukarıda bahsettiğim gibi projede
asıl işin yapıldığı sınıflarda tavsiye etmiyorum, kullanmamalıyız.
Utility fonksiyon dediğimiz apache commons kütüphanelerindeki
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StringUtils&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NumberUtils&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CollectionUtils&lt;/code&gt;, vb. sınıfların statik metodlarını kullanabiliriz
veya bunlara benzer metodları kendimiz projelerde statik olarak yazabiliriz.
Bu tip fonksiyonlara &lt;em&gt;pure&lt;/em&gt; (saf) fonksiyon deniyor.
Yani herhangi bir çevresel faktöre bağlı olmayan, aynı girdilerle her zaman aynı çıktıyı veren fonksiyonlar.&lt;/p&gt;

&lt;p&gt;Ortama bağımlı, kararsız, sağı solu belli olmayan,
sistemde global state değişikliği yapan, yan etkileri olan
statik metodlardan uzak durmalıyız.&lt;/p&gt;

&lt;div class=&quot;alert alert-secondary pb-0&quot; role=&quot;alert&quot;&gt;
  &lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt; Statik metodların da mocklanabilmesi için Java’da “Power Mock” isimli bir kütüphane mevcut.
Fakat bir gün statik bir metodu mocklama ihtiyacı hissedersek projeye “Power Mock” eklemeden önce
kodu iyileştirerek bu ihtiyacı ortadan kaldırmaya çalışmalıyız.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;bağımlı-olunan-nesnelerin-sınıf-i̇çinde-oluşturulması&quot;&gt;Bağımlı Olunan Nesnelerin Sınıf İçinde Oluşturulması&lt;/h3&gt;

&lt;p&gt;Kodda her &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt; anahtar kelimesi gördüğümüzde &lt;u&gt;ufak&lt;/u&gt; bir şüphe duymalıyız.&lt;/p&gt;

&lt;p&gt;Her sınıflar arası etkileşimi sahte/mock implementasyon olarak izole etmemeliyiz
fakat aşağıda birkaç örnek verebileceğim bazı bağımlılıklar sahte/mock şekilde izole edilmelidir.&lt;/p&gt;

&lt;p&gt;Öncelikle “unit test” kavramını herkes farklı tanımladığı için burada çok büyük anlaşmazlıklar ortaya çıkıyor.
Benim görüşümde sadece bir sınıfın/metodun davranışını diğer sınıflardan izole bir şekilde test edebilmek unit testtir.
Eğer kompleks sınıflar arası etkileşimleri/entegrasyonları test ediyorsam buna entegrasyon testi derim.
Bu kapsamda unit test yazarken aşağıdaki durumlardaki sınıfları mock olarak kullanmayı tercih ederim:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Kompleks business logic içeren veya kendisi de başka sınıflara bağımlı olan sınıflar&lt;/li&gt;
  &lt;li&gt;Veritabanı, disk, network, API, vb. ortama ve başka sistemlere bağımlı olan sınıflar&lt;/li&gt;
  &lt;li&gt;Birbirinden farklı mantıksal katmanlardaki sınıflar (Misal Controller -&amp;gt; Servis veya Servis -&amp;gt; DAO etkileşimi)&lt;/li&gt;
  &lt;li&gt;Global state üzerinde değişiklik yapan sınıflar&lt;/li&gt;
  &lt;li&gt;Kararsız, tutarsız veya saf olmayan fonksiyonlar içeren sınıflar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bunların dışında basit DTO, JPA Entity, String, Calendar, Date, vb. sınıflarda
mümkün olduğunca gerçek sınıfları kullanmaya çalışırım.&lt;/p&gt;

&lt;p&gt;Gereğinden fazla mock kullanımı testleri hem kırılgan hem okuması zor bir hale getirebilir.
Burada dengeyi iyi kurmamız gerekiyor.
Test yazdıkça bu dengenin yazılımcıda içgüdüsel olarak geliştiğini düşünüyorum.&lt;/p&gt;

&lt;p&gt;Bu bağlamda düşündüğümüzde eğer sahte/mock olarak kullanmak istediğimiz bir sınıf varsa
ve bu sınıfı test edeceğimiz kod &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt; anahtar kelimesi ile kendi içerisinde oluşturuyorsa,
bu bağımlılıkları sahteleri ile değiştirmek oldukça zorlaşır.
Daha önce statik metodlarda kullanıldığından bahsettiğim “Power Mock” kütüphanesi gibi bir kütüphane ile
bu sınıfların constructor’larını mock’lamak gibi saçma işlere girişmemiz gerekir.&lt;/p&gt;

&lt;p&gt;Bunun önüne geçebilmek için de testlerde sahtesi ile değiştirilmesi gereken bağımlılıkları
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;constructor&lt;/code&gt; ile test edilecek olan sınıfa parametre olarak almamız gerekiyor.
Eğer OOP yerine fonksiyonel programlama yapıyorsanız da
test edilen fonksiyona bu bağımlılıklar parametre olarak geçilebilir.&lt;/p&gt;

&lt;p&gt;Örneğin yukarıdaki başlıklarda verdiğim &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FrequentlyAskedQuestionServiceImpl&lt;/code&gt; ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersonServiceImpl&lt;/code&gt;
sınıflarının ikisinde de dışarıdan alınan bağımlılıklar constructor parametresi olarak geçilmiş durumda.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersonServiceImpl&lt;/code&gt; sınıfının metod içerisinde oluşturduğu &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt; nesnesi ise
sahtesi ile değiştirmeye gerek duymadığım basit bir DTO/JPA Entity sınıfı,
ya da data sınıfı diyebiliriz bu tür sınıflara.&lt;/p&gt;

&lt;p&gt;Eğer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersonServiceImpl&lt;/code&gt; veritabanına erişimde kullandığı &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersonRepository&lt;/code&gt; arayüzünün
bir implementasyonunu aşağıdaki koddaki gibi constructor içerisinde kendisi oluştursaydı,
sahtesi ile değiştirmek için test kodunda taklalar atmamız gerekirdi.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonServiceImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PersonServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mongoClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MongoClients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;personRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonRepositoryImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mongoClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CreatePersonRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createPersonRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createPersonRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFirstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;firstName cannot be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createPersonRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lastName cannot be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createPersonRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPhone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;phone cannot be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;savePerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Test yazılamamasının yanında kaliteli kod yazım standartlarına da ters düşen bir yanı var,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersonServiceImpl&lt;/code&gt; sınıfı concrete bir &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersonRepository&lt;/code&gt; implementasyonuna ihtiyaç duyuyor.
Interface’ler üzerinden etkileşim kurma özelliğini kaybediyoruz.&lt;/p&gt;

&lt;p&gt;Ayrıca &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersonServiceImpl&lt;/code&gt; sınıfının &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersonRepositoryImpl&lt;/code&gt; sınıfının nasıl
oluşturulacağı bilgisine de gereksiz yere sahip olmuş oluyor.&lt;/p&gt;

&lt;p&gt;Bu kodun mock olmadan yazılan testinin çalışması için gerçekten bir mongodb veritabanını ayağa kaldırmamız gerekiyor.
Bu da yazacağımız testi unit değil entegrasyon testi yapar.&lt;/p&gt;

&lt;h3 id=&quot;saf-olmayan-methodların-kullanılması&quot;&gt;Saf Olmayan Methodların Kullanılması&lt;/h3&gt;

&lt;p&gt;Eğer saf olmayan veya kararsız da diyebileceğimiz metodlar test etmeye çalıştığımız kod tarafından kullanılıyorsa
testlerimiz zaman ve ortam bağımlı hale gelebilir.
Bu tür testler de çoğu zaman çalışırken ara sıra sebebini anlamak için vakit kaybedeceğimiz hatalar verebilirler.&lt;/p&gt;

&lt;p&gt;Bu konuda Java’da kullanmayı en sevmediğim metodlar arasında şu tarih/zaman fonksiyonları başı çekiyor:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new Date()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Calendar.getInstance()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.currentTimeMillis()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bu tip sistemin o anki zamanını dönen metodları kullanan kodların testlerinde yazacağımız assertion’lar,
genellikle testin hızlı çalışmasına bağlı olarak başarılı bitebilse de,
testlerin çalışması sırasındaki birkaç milisaniyelik gecikme ile patlayabilirler.&lt;/p&gt;

&lt;p&gt;Örneğin aşağıdaki 1000 iterasyonluk RepeatedTest metodu 1000 iterasyonun 33 defasında hata verdi:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCurrentDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;getCurrentDate called&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;getCurrentDate result=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RepeatedTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCurrentDate_returnsCurrentDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCurrentDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Verdiği hatalardan bir tanesi de şu şekilde:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;expected: java.util.Date@96901dd&amp;lt;Tue May 18 00:53:54 EET 2021&amp;gt; but was: java.util.Date@1cccaa86&amp;lt;Tue May 18 00:53:54 EET 2021&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Görüldüğü gibi expected ve actual Date nesneleri logda saniyesine kadar aynı görünüyor,
o bir iki milisaniyelik farkı hata mesajından anlayamıyoruz bile.&lt;/p&gt;

&lt;p&gt;Bu gibi durumlar için sistem zamanını bize dönen bir sınıf oluşturuyor
ve bu sınıfı testlerde sahte bağımlılık olarak kullanıyoruz.
Biz önceden bu iş için kendi &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Clock&lt;/code&gt; sınıfımızı yazarken Java 8 sonrası &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.time.Clock&lt;/code&gt; sınıfını kullanmaya başladık.&lt;/p&gt;

&lt;p&gt;Şimdi aşağıdaki gibi constructor argümanı olarak &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Clock&lt;/code&gt; alan bir sınıf yazalım:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DateRangeValidator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Clock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DateRangeValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Clock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validateDateRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;millis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;startDate cannot be after current date&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;endDate cannot be before current date&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu sınıf için yazdığımız testlerde tarihler arası farkları aşağıdaki gibi birer milisaniye bile yapsak
1000 iterasyondan hiçbirinde hata vermemekte.
Hem test ettiğimiz kod, hem de yazdığımız test ortam bağımsız şekilde aynı girdilerde hep aynı sonucu üretmekte.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RepeatedTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validateDateRange_systemDateIsBetweenStartAndEndDates_doesNotThrowException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1621289298097L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofEpochMilli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZoneId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;systemDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DateRangeValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validateDateRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;global-değişiklik-yapan-yöntemlerin-tercih-edilmesi&quot;&gt;Global Değişiklik Yapan Yöntemlerin Tercih Edilmesi&lt;/h3&gt;

&lt;p&gt;Bu da gereksiz statik metod kullanımına benzer bir kötü pratiktir
fakat bu kötü pratiğin sonuçları test edilemez bir kod yazmış olmaktan ziyade şöyle ortaya çıkıyor:
Yazılan testler rastgele bir şekilde bazen başarılı olup bazen hata veriyor.&lt;/p&gt;

&lt;p&gt;Örneğin kodda global bir değişken (static) tanımladık ve bir metod bu değişkenin değerini değiştiriyor.
Bu değeri değiştirirken de varolan değer üzerinden bir hesaplama yapıyor.
Bu metodun 10-12 tane testini yazdık.
Her test bu global değişkende farklı bir durum değişikliğine neden olursa bir süre sonra işin ucu kaçar.
Testlerin de hangi sırayla çalışacağının garantisi olmadığından,
hangi test çalıştığında global değişken hangi değeri tutuyor gibi bilgileri kontrol etmek oldukça zorlaşır.&lt;/p&gt;

&lt;p&gt;Global statik mutable değişken kullanmaktan ve bu değişkenler üzerinde değişiklik yapan metodlar yazmaktan
mümkün olduğunca uzak durmalıyız.&lt;/p&gt;

&lt;p&gt;Bu tip global state üzerinden iş yapan kodlar testleri ayrı thread’ler ile paralel koşmanın da önüne engel koyuyor.
Aynı anda iki thread global state’e değişiklik yapabilir ve bu sebeple kodda bir hata meydana gelmese bile
test kodundaki assertion’a yazdığımız expected result tutmayabilir.&lt;/p&gt;

&lt;p&gt;Örneğin global bir AtomicInteger tuttuğumuzu ve bu sayıyı arttıran metodları iki farklı testin tetiklediğini düşünelim.
Birinci test değeri 1 iken bir arttırıp 2 olduğunu assert ediyor fakat testler paralel koştuğu için o sırada
ikinci test de değeri arttırdığından değer 3 geliyor.
Böyle senaryolarda kodun çalışması tamamen doğru olduğu halde testler hata verebilir.&lt;/p&gt;

&lt;p&gt;Biz ekipçe genellikle statik global state tutmadığımız için global state konusunda
en çok karşılaştığım problemleri genelde &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ThreadLocal&lt;/code&gt; kullanımı sebebiyle yaşamışızdır.
&lt;strong&gt;&lt;a href=&quot;/2020/04/13/thread-local-nedir-java/&quot;&gt;Thread Local&lt;/a&gt;&lt;/strong&gt;
Thread üzerinde global veri tutulması ve farklı thread’lerin bu veriyi görememesi için tasarlanmış bir nesne
fakat fazla/hatalı kullanımında o da test yazılması zor kodlara sebep olabilmekte.
Burada da testleri paralel koşmadığımızda hepsinin aynı thread tarafından çalıştırıldığını unutmayalım.
Yani &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ThreadLocal&lt;/code&gt; bir nevi tüm test suite için global bir değişken haline geliyor.&lt;/p&gt;

&lt;h2 id=&quot;bitiş&quot;&gt;Bitiş&lt;/h2&gt;

&lt;p&gt;Unit test yazı dizimizin bu yazısında test edilebilir yazılım nasıl geliştirilir
konusunu inceledik.&lt;/p&gt;

&lt;p&gt;Yazı dizisinin bu noktaya kadar olan yazılarıyla birlikte düşündüğümüzde,
etkili unit testler yazdığımızda projenin yazılım kalitesinin nasıl artabileceğini
artık daha iyi anlıyoruz.
Kaliteli unit testler yazmaya çabaladığımızda sadece testlerin değil
production kodunun da kalitesinin artmaya başladığını fark edeceğiz.
Unit test yazacağını bilerek kod yazan geliştirici ya yazılımı baştan test edilebilir
şekilde tasarlar ya da test yazamadığı noktada yazılımı test edilebilir hale
dönüştürmeye çalışır.&lt;/p&gt;

&lt;p&gt;Bu konular kesin doğrusu olmayan ve tartışmaya çok açık konular olduğu için, 
ben de bu konular üzerinde tartışmayı sevdiğim için,
fikir ayrılıklarına düştüğümüz noktalarda ya da hemfikir olduğumuz noktalarda 
lütfen yorumlarınızı esirgemeyin.&lt;/p&gt;

</description>
        <pubDate>Tue, 18 May 2021 20:15:00 +0000</pubDate>
        <link>https://serdarkuzucu.com/2021/05/18/unit-test-edilebilir-yazilim-nasil-gelistirilir/</link>
        <guid isPermaLink="true">https://serdarkuzucu.com/2021/05/18/unit-test-edilebilir-yazilim-nasil-gelistirilir/</guid>
        
        
        <category>Java</category>
        
        <category>Programlama</category>
        
        <category>Unit Test</category>
        
      </item>
    
      <item>
        <title>Unit Test 04: Kaliteli Unit Test Nasıl Yazılır?</title>
        <description>&lt;p&gt;“Unit Test” yazı dizisinin bir önceki yazısında neden unit test yazarız
sorusuna cevaplar arayıp unit testlerin faydalarına değinmiştik.
İkna olduysak artık test yazmaya başlayabiliriz.
Peki unit test nasıl yazılmalı? 
Unit test yazarken nelere dikkat etmeliyiz?
Unit testlerimizin kaliteli, faydalı ve amaca yönelik olması için 
takip etmemiz gereken kurallar nelerdir?
Bu yazıda da konunun bu boyutunu ele alıyor olacağız.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h4 id=&quot;küçük-testler-yazalım&quot;&gt;Küçük Testler Yazalım&lt;/h4&gt;

&lt;p&gt;Unit testler olabildiğince küçük kod parçaları olmalılar.
Hata veren bir unit test çok hızlı bir şekilde okunabilmeli,
testteki veri mi yoksa test edilen kod mu sıkıntılı çabucak anlaşılabilir olmalıdır.&lt;/p&gt;

&lt;p&gt;Ayrıca uzun test fonksiyonları küçük değişikliklerden daha sık etkilenirler
ve bu test kodlarında sonradan değişiklik yapmak da zorlaşır.
Bu da kodun bakım maliyetinin yanında testlerin de bakım maliyetlerini arttırır.&lt;/p&gt;

&lt;h4 id=&quot;bağımlılıklardan-i̇zole-edelim&quot;&gt;Bağımlılıklardan İzole Edelim&lt;/h4&gt;

&lt;p&gt;Unit testi “unit” yapan şey sadece ve sadece test ettiği kodu test ediyor oluşudur.
Test edilen kodun herhangi bir bağımlılığı varsa test sırasında bu bağımlılık izole edilir.
Yani bağımlı olan sınıfın belirli bir davranışı sergilediği varsayılır, simüle edilir.
Buna mocking denir ve birçok dilde bunu yapmamızı sağlayan kütüphaneler vardır.&lt;/p&gt;

&lt;div class=&quot;alert alert-secondary pb-0&quot; role=&quot;alert&quot;&gt;
  &lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt; Ben bu yazıda birçok farklı izolasyon yöntemine mocking diyorum.
Production için tasarlanmış bir bağımlılığın/nesnenin test amacıyla değiştirilmesi işinin genel adı literatüre
&lt;a href=&quot;https://www.martinfowler.com/bliki/TestDouble.html&quot; target=&quot;_blank&quot;&gt;Test Double&lt;/a&gt;
olarak geçmiş ve birçok &lt;em&gt;Test Double&lt;/em&gt; çeşidi var.
Mocking bu çeşitlerden sadece bir tanesi fakat bizim dilimize malesef böyle yerleşmiş.
Martin Fowler’ın sitesinde yazdığı diğer &lt;em&gt;Test Double&lt;/em&gt; çeşileri: &lt;em&gt;Dummy, Fake, Stub ve Spy&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Bağımlı olduğumuz fonksiyonda bir hata varsa bunu nasıl yakalarız diye soruyorsanız,
onu da bağımlı olduğumuz sınıf/fonksiyon için yazdığımız unit testlerde yakalamamız gerekiyor.&lt;/p&gt;

&lt;p&gt;Java’da bu mocking işlemini yapmamızı ve bağımlılıklar varmış gibi davranmamızı sağlayan kütüphanelerin başını
Mockito çekiyor. Aşağıda Mockito kullanarak yazdığım bir örneği anlatacağım.&lt;/p&gt;

&lt;p&gt;Aşağıdaki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersonServiceImpl&lt;/code&gt; isimli sınıfın &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createPerson&lt;/code&gt; isimli metodunu test etmek istediğimizi düşünelim.
Bu sınıfın &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersonRepository&lt;/code&gt; isimli bir interface bağımlılığı var.
Bu repository muhtemelen bir veritabanına insert işlemi yapmakta olup, ne yaptığı bizi hiç ama hiç ilgilendirmiyor.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonServiceImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PersonServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PersonRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;personRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CreatePersonRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createPersonRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createPersonRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFirstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;firstName cannot be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createPersonRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lastName cannot be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createPersonRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPhone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;phone cannot be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;savePerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hatta ben bu sınıf için test yazarken &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersonRepository&lt;/code&gt; arayüzü için bir implementasyon sınıfı bile yazmadım.
Mockito kullanarak &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersonRepository&lt;/code&gt; arayüzünün sahte (mock) bir implementasyonunu hazırladım
ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;savePerson&lt;/code&gt; metodu çağırıldığında ne dönmesini istediğimi aşağıdaki test metodunda belirttim.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createPerson_validCreatePersonRequest_returnsSamePersonReturnedFromRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Arrange&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PersonRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;personRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Serdar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Kuzucu&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+905554443322&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectedResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;personRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;savePerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Act&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CreatePersonRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Serdar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Kuzucu&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+905554443322&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Assert&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertSame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectedResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu test kaynak kodda &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersonRepository&lt;/code&gt; arayüzünün herhangi bir implementasyonu olmasa bile
başarılı bir şekilde geçiyor. Eğer bu izolasyonu sağlamasaydık gerçek bir &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersonRepository&lt;/code&gt; implementasyonuna
ihtiyacımız olacaktı. Bu durumda da bu implementasyon bir veritabanı kullanıyorsa testleri çalıştırabilmek için
bizim de bir veritabanı bağlantısı kurmamız gerekecekti.
Böyle bir test de unit test değil entegrasyon testi olacaktır.&lt;/p&gt;

&lt;h4 id=&quot;birbirinden-bağımsız-testler-yazalım&quot;&gt;Birbirinden Bağımsız Testler Yazalım&lt;/h4&gt;

&lt;p&gt;Unit testler asla birbirine bağımlı olmamalıdır.
Bir unit testin çalışması için öncesinde başka bir testin başarıyla çalışmış olması gerekmemelidir.
Böyle bir bağımlılık testlerin sıralı çalıştırılmasını zorunlu kılar ve çoğu test suite yazılımı (junit, vb.)
test senaryolarının sıralı çalışacağını garanti etmez.
Lokalimizde bir test sınıfındaki tüm testler doğru sırayla çalışıp başarılı olurken,
CI/CD ortamında farklı sırayla çalışıp hata alabilirler.&lt;/p&gt;

&lt;p&gt;Testler arası state paylaşımından olabildiğince kaçınmamız gerekiyor.
Her test kendi state’ini oluşturmalı ve test sonrasında gerekiyorsa temizlemelidir.
Eğer bir test sınıfındaki tüm testlerde başlangıç ve bitiş durumları için aynı kodları yazmak gerekiyorsa
bunu bir testte yapıp diğerlerinin sırayla çalışacağını varsaymak yerine,
kullandığımız test framework’ünün &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Setup&lt;/code&gt; ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TearDown&lt;/code&gt; özelliklerini kullanmalıyız.&lt;/p&gt;

&lt;p&gt;Java’da çoğunlukla kullandığımız junit test framework’ünde bu “Setup” ve “TearDown” özellikleri,
kullandığımız junit versiyonuna göre,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Before&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@After&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@BeforeClass&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@AfterClass&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@BeforeEach&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@AfterEach&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@BeforeAll&lt;/code&gt; ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@AfterAll&lt;/code&gt;
gibi anotasyonlar ile sağlanıyor.&lt;/p&gt;

&lt;h4 id=&quot;aaa-tasarım-şablonuna-uyalım&quot;&gt;AAA Tasarım Şablonuna Uyalım&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;/2021/05/18/unit-test-nedir/&quot;&gt;Yazı dizisinin ilk yazısında&lt;/a&gt; da değindiğim 
Arrange-Act-Assert, kısaca AAA, tasarım şablonunu mümkün olduğunca uygulayalım.
Bu şablon hem dünya çapında genel geçer bir tasarım şablonu
hem de testlerin okunabilirliğini arttıran bir yöntem.
Testin okunabilir olması testin ne amaçla yazıldığını anlamayı kolaylaştırır.
Anlaşılabilir bir test hata verdiğinde testteki veya koddaki hatanın bulunması da daha kolay olur.&lt;/p&gt;

&lt;p&gt;Testlerimizi bu 3 aşamayı düşünerek yazdığımızda “ben bu test koduyla neyi test ediyorum”
sorusunu kendi kendimize cevaplamamızı da kolaylaştıracaktır.&lt;/p&gt;

&lt;h4 id=&quot;bir-testte-sadece-bir-şeyi-test-edelim&quot;&gt;Bir Testte Sadece Bir Şeyi Test Edelim&lt;/h4&gt;

&lt;p&gt;Son derece normal bir şekilde test ettiğimiz fonksiyonun birden fazla dalı olabilir.
Farklı girdilerde farklı çıktılar üreten değişik iş akışlarına sahip olabilir.
Hata veren testlerden koddaki hatayı daha hızlı anlayabilmemiz için
bir testin sadece tek bir şeyi test ediyor olması gerekmekte.&lt;/p&gt;

&lt;p&gt;Örnek olarak aşağıdaki servis sınıfımızı düşünelim:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FrequentlyAskedQuestionServiceImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FrequentlyAskedQuestionService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FrequentlyAskedQuestionRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequentlyAskedQuestionRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EventPublisher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FrequentlyAskedQuestionServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FrequentlyAskedQuestionRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequentlyAskedQuestionRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                              &lt;span class=&quot;nc&quot;&gt;EventPublisher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;frequentlyAskedQuestionRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequentlyAskedQuestionRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eventPublisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SaveFAQResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveFaq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frequentlyAskedQuestionRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;existsByQuestion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SaveFAQResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALREADY_EXISTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FAQ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persistedFaq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequentlyAskedQuestionRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveFAQ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fireEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FAQSavedEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;persistedFaq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SaveFAQResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Burada aşağıdaki gibi 6 farklı senaryoyu test edebiliriz:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Başarılı işlemde SUCCESS cevabı dönmeli:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveFaq_validQuestionAndAnswer_returnsSuccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;How to deorbit a satellite?&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Lorem ipsum dolor sit amet...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FrequentlyAskedQuestionRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;existsByQuestion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FAQ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveFAQ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FAQ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FrequentlyAskedQuestionServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveFaq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SaveFAQResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Başarılı işlemlerde &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FrequentlyAskedQuestionsRepository&lt;/code&gt; üzerindeki
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;saveFAQ&lt;/code&gt; metodu doğru argümanlar ile tetiklenmeli:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveFaq_validQuestionAndAnswer_callsRepositorySaveMethodWithTheSameQuestionAndAnswerValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;How to deorbit a satellite?&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Lorem ipsum dolor sit amet...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FrequentlyAskedQuestionRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;existsByQuestion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FAQ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveFAQ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FAQ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FrequentlyAskedQuestionServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveFaq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faqArgumentCaptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgumentCaptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FAQ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveFAQ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faqArgumentCaptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faqArgumentCaptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getQuestion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faqArgumentCaptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnswer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Başarılı işlemlerde &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventPublisher&lt;/code&gt; üzerindeki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fireEvent&lt;/code&gt; metodu doğru argümanlar ile tetiklenmeli:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createFaq_validQuestionAndAnswer_firesFAQSavedEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;How to deorbit a satellite?&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Lorem ipsum dolor sit amet...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FrequentlyAskedQuestionRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;existsByQuestion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FAQ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveFAQ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FAQ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FrequentlyAskedQuestionServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveFaq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventArgumentCaptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgumentCaptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FAQSavedEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fireEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventArgumentCaptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventArgumentCaptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getQuestion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventArgumentCaptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnswer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FrequentlyAskedQuestionRepository&lt;/code&gt; sınıfındaki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;existsByQuestion&lt;/code&gt; metodu &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; dönerse
servis metodumuz &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALREADY_EXISTS&lt;/code&gt; değerini dönmeli.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createFaq_alreadyExistingQuestion_returnsAlreadyExists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;How to deorbit a satellite?&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Lorem ipsum dolor sit amet...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FrequentlyAskedQuestionRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;existsByQuestion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FrequentlyAskedQuestionServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveFaq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SaveFAQResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALREADY_EXISTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FrequentlyAskedQuestionRepository&lt;/code&gt; sınıfındaki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;existsByQuestion&lt;/code&gt; metodu &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; dönerse
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FrequentlyAskedQuestionRepository&lt;/code&gt; sınıfındaki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;saveFAQ&lt;/code&gt; metodu hiç çağırılmamalı.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createFaq_alreadyExistingQuestion_doesNotCallSaveFaqMethodOfRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;How to deorbit a satellite?&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Lorem ipsum dolor sit amet...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FrequentlyAskedQuestionRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;existsByQuestion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FrequentlyAskedQuestionServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveFaq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveFAQ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FrequentlyAskedQuestionRepository&lt;/code&gt; sınıfındaki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;existsByQuestion&lt;/code&gt; metodu &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; dönerse
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventPublisher&lt;/code&gt; sınıfındaki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fireEvent&lt;/code&gt; metodu hiç çağırılmamalı.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createFaq_alreadyExistingQuestion_doesNotPublishAnyEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;How to deorbit a satellite?&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Lorem ipsum dolor sit amet...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FrequentlyAskedQuestionRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;existsByQuestion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FrequentlyAskedQuestionServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveFaq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fireEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu şekilde unit testleri sadece bir şeyi test eder şekilde kurguladığımızda
ileride kodda yapılacak bir değişikliğin tam olarak hangi senaryoyu veya senaryoları etkilediğini aldığımız hatadan
nokta atışı bulabiliriz.&lt;/p&gt;

&lt;p&gt;Bu arada bu örnek testleri yazarken yine daha önce yaptığım gibi &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FrequentlyAskedQuestionServiceImpl&lt;/code&gt;
dışındaki hiçbir sınıfı doğru düzgün geliştirmedim.
Testlerdeki izolasyon sayesinde buna ihtiyacım kalmadan yazdığım tüm testler başarılı bir şekilde çalıştı.&lt;/p&gt;

&lt;h4 id=&quot;hızlı-çalışan-testler-yazalım&quot;&gt;Hızlı Çalışan Testler Yazalım&lt;/h4&gt;

&lt;p&gt;Unit testleri hızlıca çalıştırılıp sonuç alabileceğimiz şekilde yazmalıyız.
Uzun test çalışma süreleri genellikle geliştiricilerin testleri çalıştırmadan build almasıyla sonuçlanıyor.&lt;/p&gt;

&lt;p&gt;Bir zamanlar üzerinde çalıştığım bu şekilde bir proje vardı.
Çalışan testler çok uzun sürüyordu, birçoğu da çalışmıyordu.
Nasıl olsa testler çalışmıyor diye kimse testleri çalıştırarak build almıyordu,
kimse hataları düzeltmeye bile çalışmıyordu.
Problem projedeki tüm testlerin silinmesiyle sonuçlandı.&lt;/p&gt;

&lt;p&gt;Yavaş testler, test edilen sınıftaki bağımlılıkların testlerde yeterince izole edilmediğinin
veya test edilen kodun aslında test edilebilir bir kod olmadığının göstergesi olabilir.&lt;/p&gt;

&lt;h4 id=&quot;i̇lk-olarak-en-basit-başarılı-senaryoyu-test-edelim&quot;&gt;İlk Olarak En Basit Başarılı Senaryoyu Test Edelim&lt;/h4&gt;

&lt;p&gt;Test edeceğimiz kodun ne yapması gerekiyor? Asıl varoluş amacı ne?
Bu soruya vereceğimiz en basit ve hızlı cevap için hemen bir test yazalım.&lt;/p&gt;

&lt;p&gt;Örneğin bir String’i ters çeviren bir kodu test ediyorsak önce ters çevirilebilir kısa bir metin ile test edelim.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reverse_threeLetterString_returnsReversedString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cba&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Daha sonraki testlerde daha kompleks akışlara, uç senaryolara ve istisna durumlarına geçebiliriz.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reverse_nullArgument_returnsNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;uç-senaryoların-testlerini-yazalım&quot;&gt;Uç Senaryoların Testlerini Yazalım&lt;/h4&gt;

&lt;p&gt;Test edilen kodun uç senaryolarını da düşünelim ve mutlaka bu senaryolar için test yazalım.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Parametre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; gelirse ne olur?&lt;/li&gt;
  &lt;li&gt;DB’den bir sonuç beklerken iki sonuç gelirse ne olmalı? Hiç sonuç gelmezse?&lt;/li&gt;
  &lt;li&gt;Bölme işlemi içeren bir fonksiyonda paydaya 0 (sıfır) gelme ihtimali var mı?&lt;/li&gt;
  &lt;li&gt;Beklediğimden büyük bir sayı gelirse integer overflow olur mu?&lt;/li&gt;
  &lt;li&gt;Kullanıcı adı boş String (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;) geldiğinde fonksiyon ne yapmalı?&lt;/li&gt;
  &lt;li&gt;Javascript kodum &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt; arasındaki farkı ayırt edebiliyor mu?&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Daha aklımıza gelebilecek bir çok senaryoyu buraya ekleyebiliriz ve çoğu kodda da geçerlidir bu durumlar.&lt;/p&gt;

&lt;p&gt;Eğer kodumuz sınırlı bir veri aralığı ile ilgiliyse bu sınırların çizgilerini,
sınırın bir miktar dışını, bir miktar içini de testlerimize eklemeliyiz.&lt;/p&gt;

&lt;p&gt;Örneğin bir kullanıcının 3 defa şifresini yanlış girme hakkı varsa
bu kontrolü yapan kodu şifrenin doğru girilmesi için test ettiğimiz gibi
mutlaka 2, 3 ve 4 gibi sayılar ile test etmeliyiz.&lt;/p&gt;

&lt;h4 id=&quot;tüm-yol-ayrımlarını-test-edelim&quot;&gt;Tüm Yol Ayrımlarını Test Edelim&lt;/h4&gt;

&lt;p&gt;Test edilen kodda yol ayrımları (if/else, loop, vb.) varsa
mutlaka o yol ayrımlarına giren ve girmeyen testleri &lt;em&gt;ayrı ayrı&lt;/em&gt; yazmaya özen gösterelim.&lt;/p&gt;

&lt;p&gt;Bu hem &lt;em&gt;coverage&lt;/em&gt; denen testlerin kodun ne kadarını kapsadığı metriğini arttırır
hem de bu tür durumlarda olabilecek hataların erken fark edilmesini sağlar.&lt;/p&gt;

&lt;p&gt;Kullanılan dile ait &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enum&lt;/code&gt; gibi bazı yapılar da gizli yol ayrımlarına neden olabilirler.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enum&lt;/code&gt; tipinde bir veri üzerinde çalışan kodların testlerini yazarken
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enum&lt;/code&gt; üzerinde tanımlanmış tüm olası değerler için birer test yazmalıyız.&lt;/p&gt;

&lt;h4 id=&quot;hata-bulmak-i̇çin-test-yazalım&quot;&gt;Hata Bulmak İçin Test Yazalım&lt;/h4&gt;

&lt;p&gt;Eğer kodda belirli bir durumda bir hata oluştuğu iddia ediliyorsa,
kodu okuyup bug-fix geliştirmeden önce bu hatayı oluşturan bir unit test yazalım.&lt;/p&gt;

&lt;p&gt;Testi çalıştırdığımızda hata alıyorsa doğru yoldayız demektir.
Sonrasında istersek doğrudan koda dalabiliriz
veya kod okumak için çok karışıksa testi debug modda çalıştırarak debug edebiliriz.&lt;/p&gt;

&lt;p&gt;Koddaki düzeltmeyi yaptığımızda yazmış olduğumuz testin başarılı olduğunu görürsek tebrikler!
Hem bir hatayı çözmüş oluruz hem de bu hatanın bir daha ortaya çıkmayacağını garanti altına alan
nur topu gibi bir unit testimiz olur.&lt;/p&gt;

&lt;h4 id=&quot;i̇simlendirmelere-dikkat-edelim&quot;&gt;İsimlendirmelere Dikkat Edelim&lt;/h4&gt;

&lt;p&gt;Test isimlendirme konusunda çok farklı yazım standartları var
ve birçok farklı standart farklı farklı geliştiriciler tarafından benimsenmiş durumda.
Burada testlerimizi kesin şu şekilde isimlendirmeliyiz diyemiyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dzone.com/articles/7-popular-unit-test-naming&quot; target=&quot;_blank&quot;&gt;Şu makalede&lt;/a&gt;
7 farklı popüler isimlendirme örneği gösterilmiş.
Hepsinin kendi avantajları ve dezavantajları var.
&lt;a href=&quot;https://www.petrikainulainen.net/programming/testing/writing-clean-tests-naming-matters/&quot; target=&quot;_blank&quot;&gt;Şu makalede&lt;/a&gt;
ise test kodundaki isimlendirmelerin öneminden bahsedilmiş.
Böyle konular çok tartışmaya açık konular olduğundan bu tip konularda fikir alışverişi de fazla oluyor.&lt;/p&gt;

&lt;p&gt;Burada önerebileceğim en önemli şey şu, test ismine bakıldığında neyin test edildiği anlaşılmalı.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test01&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test02&lt;/code&gt; gibi isimlendirmelerden veya fonksiyon ismi + sayı gibi hangi fonksiyonun test edildiği dışında
bir bilgi vermeyen isimlendirmelerden kaçınmalıyız.&lt;/p&gt;

&lt;p&gt;Bir diğer önerim de ekip içerisinde popüler bir isimlendirme standartına karar verilip onun uygulanması.
Bir projede farklı diğerinde farklı isimlendirmeler yapılması bir süre sonra kafa karışıklığına yol açıyor
ve devamında aynı projede farklı isimlendirme standartları ortaya çıkmaya başlıyor.&lt;/p&gt;

&lt;p&gt;Ben şahsi olarak Java dilinde geliştirme yaparken Java metod isimlendirme kurallarına
mümkün olduğunca uyulmasından yanayım.
Sonuçta test metodu da bir Java kodu.
Bu sebeple metod isimlerine büyük harf ile başlamayı kesinlikle sevmem.
Fakat test metod isminin uzunca bir cümle olabileceğinden dolayı
cümlenin farklı parçalarını &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt; ile ayırmayı da severim.
Bu okunabilirliği arttırır.
Unutmayalım bir test hata verdiğinde test isminin ne kadar okunabilir olduğu önemlidir.&lt;/p&gt;

&lt;p&gt;Bu sebeple favori test metod ismi yazım stilim olan
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[testEdilenMetodİsmi]_[verilenGirdi|testEdilenDurum]_[beklenenÇıktı|beklenenDavranış]&lt;/code&gt;
stilini kullandım bu yazıdaki örneklerde de.&lt;/p&gt;

&lt;p&gt;Bahsettiğim standart ile yazılmış bazı örnekler:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registerUser_nullUsername_throwsException&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reverseString_emptyString_returnsEmptyString&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fireEvent_subscriptionCreatedEvent_writesEventToKafka&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bazen test edilecek metod herhangi bir state veya input bağımlılığı olmadan çok basit bir işlem yapıyor olabilir.
Bu durumda test ismi yazacağız diye bir şeyler uydurmaya çalışmaya gerek yok.
Bazı kısımları atlayabiliriz.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getUsername_returnsUsername&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getCurrentTime_returnsCurrentTime&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;vb. örnekler çoğaltılabilir.&lt;/p&gt;

&lt;h4 id=&quot;i̇stisnaları-exceptions-test-edelim&quot;&gt;İstisnaları (Exceptions) Test Edelim&lt;/h4&gt;

&lt;p&gt;Test edilen kodun istisna durumları varsa, Java’da buna Exception deniyor, bunlar için de test yazmalıyız.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h5&gt;&lt;a href=&quot;https://tr.wikipedia.org/wiki/%C3%87ehov%27un_silah%C4%B1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Çehov'un silahı&lt;/a&gt;&lt;/h5&gt;
  &lt;p&gt;“Eğer birinci perde açıldığında duvarda bir tüfek asılıysa
takip eden sahnede tüfek mutlaka patlamalı.
Aksi takdirde oraya koymayın.”&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt;
  &lt;cite title=&quot;Bootstrap Grid System&quot;&gt;
    &lt;a href=&quot;https://tr.wikipedia.org/wiki/Anton_%C3%87ehov&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Anton Çehov&lt;/a&gt;
  &lt;/cite&gt;
&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Test edilen kodda bir yerde bir Exception fırlatıldığını görüyorsak,
bu durumun doğru bir şekilde gerçekleştiğinden de emin olmalıyız.&lt;/p&gt;

&lt;p&gt;Eğer unit test ile bile o istisna durumunu sağlayamıyorsak
o koşulu kodumuzdan silebiliriz, büyük ihtimalle gereksizdir ve canlıda da karşımıza çıkmayacaktır.&lt;/p&gt;

&lt;p&gt;Java 8 öncesi biraz daha zahmetli olan Exception testi yazma konusu
Java 8 ve Junit 5 kütüphanesinin gelmesiyle aşağıdaki gibi
oldukça kolaylaşmış ve yazması keyifli hale gelmiş durumda.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Test edilen kod&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;throwIfUserDoesNotHavePrivilege&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;privilege&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthorities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;GrantedAuthority:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAuthority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;privilege:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElseThrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccessDeniedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Privilege: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;privilege&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Test kodu&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;throwIfUserDoesNotHavePrivilege_userDoesNotHavePrivilege_throwsAccessDeniedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;privileges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimpleGrantedAuthority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PRIV_CHANGE_PASSWORD&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimpleGrantedAuthority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PRIV_VIEW_PROFILE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;privileges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assertThrows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AccessDeniedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;throwIfUserDoesNotHavePrivilege&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PRIV_UPDATE_PROFILE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Privilege: PRIV_UPDATE_PROFILE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;testlerimiz-başarısız-olduğunda-sebebi-belli-olsun&quot;&gt;Testlerimiz Başarısız Olduğunda Sebebi Belli Olsun&lt;/h4&gt;

&lt;p&gt;Bir test hata vermeye başladığında test kodunu okumadan önce
hatanın hangi senaryoda ve hangi durumda olduğunu anlayabiliyor olmalıyız.&lt;/p&gt;

&lt;p&gt;Bunun için anlamlı test metodu isimleri kullanma başlığında anlattıklarımın dışında
bir de doğru assert kullanımı konusu var.&lt;/p&gt;

&lt;p&gt;Eğer elimizde karşılaştırabileceğimiz iki değer varsa &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertEquals&lt;/code&gt; veya &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertSame&lt;/code&gt; kullanmalıyız.
Böyle durumlarda karşılaştırmayı kendimiz yapıp &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertTrue&lt;/code&gt; kullanırsak patlayan testin verdiği hata mesajından
test ettiğimiz kodun ürettiği sonucu göremeyiz.&lt;/p&gt;

&lt;p&gt;Örneğin aşağıda aynı hatalı kontrollerin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertEquals&lt;/code&gt; ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertTrue&lt;/code&gt; ile verdiği hata mesajlarını okuyalım:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Hata mesajı: expected: &amp;lt;true&amp;gt; but was: &amp;lt;false&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Hata mesajı: expected: &amp;lt;4&amp;gt; but was: &amp;lt;5&amp;gt;&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Lorem ipsam&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Lorem ipsum&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actualResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Hata mesajı: expected: &amp;lt;true&amp;gt; but was: &amp;lt;false&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Lorem ipsum&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Hata mesajı: expected: &amp;lt;Lorem ipsum&amp;gt; but was: &amp;lt;Lorem ipsam&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Tabi ki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boolean&lt;/code&gt; dönen bir metodun testini yazarken mecburen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertTrue&lt;/code&gt; kullanmamız gerekiyor.
İki elimiz kanda da olsa &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertTrue&lt;/code&gt; kullanmayalım gibi bir durum yok.
O assertion’ın da bir varoluş sebebi var kütüphanede.&lt;/p&gt;

&lt;p&gt;Ek olarak test yazarken kendimize sık sık bu soruyu da soralım:
“Bu test bu assert sebebiyle patladığında hata mesajında ne yazar?”
Hata mesajındaki bilginin yetersiz olacağını düşündüğümüz noktada,
kullandığımız test kütüphanesi izin veriyorsa assert mesajına özel bir de bilgi de ekleyebiliriz.&lt;/p&gt;

&lt;p&gt;Örneğin aşağıdaki kodda &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertTrue&lt;/code&gt; kullandık fakat hata mesajını özelleştirdik:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startsWithPriv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;privilegeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PRIV_&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWithPriv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Privilege &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;privilegeName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; does not start with PRIV_ prefix!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Hata mesajı: Privilege PR_AAA does not start with PRIV_ prefix! ==&amp;gt; expected: &amp;lt;true&amp;gt; but was: &amp;lt;false&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;ortam-bağımsız-çalışsın&quot;&gt;Ortam Bağımsız Çalışsın&lt;/h4&gt;

&lt;p&gt;Unit testler üzerinde çalıştığı ortamdan bağımsız şekilde her yerde çalışabilecek kadar izole geliştirilmeli.
Yabancı bir blogda unit testler annenizin bilgisayarında bile çalışabilmeli yazmıştı bilgili bir abimiz.&lt;/p&gt;

&lt;p&gt;Özellikle platform bağımsız dillerde dil farklı makineleri ve işletim sistemlerini destekliyor olsa bile
yazılımcılar spesifik ortamlara bağımlı kodlar yazabilmektedir.
Test edilen kodun ortam bağımsız olması ile ilgili konuları yazı dizimizin bir sonraki yazısı olan
test edilebilir kod yazmak ile ilgili başlıkta da inceleyeceğiz.&lt;/p&gt;

&lt;p&gt;Koddaki veritabanı, disk veya network gibi dış bileşenlerin kullanıldığı kısımları
testlerde mock implementasyonlar kullanarak izole ederek ortam bağımsız hale getirebiliriz.&lt;/p&gt;

&lt;p&gt;Linux/Windows arası dosya sistemindeki klasör ayracı (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt;) değişiyor.
Bu tür şeylere dikkat ederek işletim sistemi ile ilgili problemlerden kurtulabiliriz.&lt;/p&gt;

&lt;p&gt;Tarih/Zaman ile çalışan kodlarda tarih/zaman’ın sistemden okunması ile ilgili kısımları koddan izole ederek
farklı zaman + timezone problemlerinden kurtulabiliriz.&lt;/p&gt;

&lt;p&gt;Benim en çok karşılaştığım problem timezone oldu bugüne kadar.
CI/CD sunucusu GMT+0 zamanında çalışırken geliştirici ekip olarak biz Türkiye’de GMT+3 zamanında çalışıyoruz.
Test kodunda bir tarihi elle String olarak yazıp formatladığımızda
lokalde çalışan testler CI/CD sunucusunda hata veriyor.
Bununla ilgili kullandığımız çözümü de bir sonraki yazıda paylaşacağım.&lt;/p&gt;

&lt;h4 id=&quot;sonuç&quot;&gt;Sonuç&lt;/h4&gt;

&lt;p&gt;Unit test yazı dizimizin bu yazısında, 
unit testlerin nasıl daha kaliteli, okunabilir ve işe yarar şekilde geliştirilebileceği konusunu inceledik.&lt;/p&gt;

&lt;p&gt;Bir test metodu ile sadece bir şeyi test etmemiz gerekirken, 
test edilen koddaki her bir farklı senaryo için de ayrı bir test yazmamız gerekiyor.&lt;/p&gt;

&lt;p&gt;Unit testi diğer test çeşitlerinden ayıran özelliklere gerçekten sahip olabilmemiz için 
bu yazıdaki her bir maddeye özen göstererek testlerimizi geliştirmemiz gerekiyor.&lt;/p&gt;

&lt;p&gt;Bu maddelere uyabilmemiz için de test edilebilir, kaliteli bir production koduna ihtiyacımız var.
Yazı dizimizin bir sonraki yazısında da test edilebilir kod nasıl yazılır konusunu inceleyeceğiz.&lt;/p&gt;
</description>
        <pubDate>Tue, 18 May 2021 20:10:00 +0000</pubDate>
        <link>https://serdarkuzucu.com/2021/05/18/kaliteli-unit-test-nasil-yazilir/</link>
        <guid isPermaLink="true">https://serdarkuzucu.com/2021/05/18/kaliteli-unit-test-nasil-yazilir/</guid>
        
        
        <category>Java</category>
        
        <category>Programlama</category>
        
        <category>Unit Test</category>
        
      </item>
    
      <item>
        <title>Unit Test 03: Neden Unit Test Yazarız?</title>
        <description>&lt;p&gt;“Unit Test” yazı dizisinin bir önceki yazısında
unit test ve diğer test çeşitlerini birbirinden ayıran temel farkları incelemiştik.
Bu yazıda neden unit test yazmalıyız sorusuna cevap arayacağız.
Bu soruya bulduğumuz cevaplar bize aslında unit test yazmanın faydalarını anlatıyor olacak.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Şimdi unit test yazmak için bizleri motive edecek birkaç tane sebebi inceleyelim.&lt;/p&gt;

&lt;h4 id=&quot;hataların-erken-fark-edilmesi&quot;&gt;Hataların Erken Fark Edilmesi&lt;/h4&gt;

&lt;p&gt;Unit test yazılarak geliştirilen bir kodda yapılabilecek hatalar henüz o kodun geliştirme aşamasında fark edilecektir.
Kendi tecrübelerimden gördüğüm kadarıyla bu şekilde çok farklı şekillerde hatalar bulunabiliyor.
Hata bulma işlemi testleri yazıp çalıştırdığımızda beklenen sonucun gelmemesi sonucunda testin patlaması
şeklinde gerçekleşebileceği gibi, test yazımı ile kodun geliştirilmesi birlikte ilerlediğinden, test yazarken
koddaki hatayı gözle daha testi çalıştırmadan yakalamamız şeklinde de gerçekleşebiliyor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/defect-cost-increase.png&quot; alt=&quot;Hatanın Maliyeti&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki grafik &lt;em&gt;Steve McConnell&lt;/em&gt; tarafından yazılmış olan meşhur
&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_Complete&quot; target=&quot;_blank&quot;&gt;Code Complete&lt;/a&gt;
kitabında yer alıyor.
Grafiği en basit haliyle şöyle yorumlayabiliriz;
bir hatanın oluşması ile fark edilmesi arasında ne kadar zaman geçerse, hatanın çözülmesi maliyeti o kadar artar.
Grafiğe göre en maliyetli hatalar gereksinim belirleme aşamasında oluşup canlıya alım sonrası ortaya çıkan hatalar.&lt;/p&gt;

&lt;p&gt;Unit testler birçok hatanın geliştirme sırasında bulunmasını ve çözülmesini sağladığı için
hata çözme maliyetimizi minimum seviyeye indirmemizi sağlar.
Yine de geliştirme öncesinde yapılacak olan gereksinim belirleme, analiz, sistem mimarisi çalışmalarının da
minimum hata ile yapılmasının ve bu aşamalarda olabilecek hataların çözümünün geliştirme sürecine kadar gelmemesi
gerektiğinin de altını çizmek gerekiyor.&lt;/p&gt;

&lt;h4 id=&quot;unit-test-kodun-dökümantasyonudur&quot;&gt;Unit Test Kodun Dökümantasyonudur&lt;/h4&gt;

&lt;p&gt;Kaliteli kod kendisinin dökümantasyonudur bakış açısına benzer şekilde,
kaliteli testler de test ettiği kodun bir dökümantasyonudur.&lt;/p&gt;

&lt;p&gt;Karışık bir algoritma içeren bir fonksiyonu kaynak kodunu okuyarak
anlamaktan daha kolayı unit testleri okuyarak anlamaktır.
Özellikle benim gibi kod okurken fonksiyonlara soyut seviyelerde bakmayı seviyorsanız,
siz de kodun içeriğine fazla girmeden dışarıdan baktığınızda ne yaptığını anlamak istersiniz.
Bunun için çoğu durumda fonksiyonların isimlendirmeleri yeterli olsa da
bazen birkaç tane unit testi okumak daha faydalı ve yeterli olabiliyor.&lt;/p&gt;

&lt;p&gt;İyi yazılmış, okunaklı unit testler incelediğimiz fonksiyona veya bileşene hangi girdiler verildiğinde
hangi çıktıların alınacağını gösteren çok güzel örnekler barındırır.
Test edilen kodun happy path olarak nasıl çalıştığını, uç senaryolarının neler olduğunu örnekler ile görmemizi sağlar.&lt;/p&gt;

&lt;h4 id=&quot;unit-test-kodu-i̇stenmeyen-değişikliklerden-korur&quot;&gt;Unit Test Kodu İstenmeyen Değişikliklerden Korur&lt;/h4&gt;

&lt;p&gt;Burası unit testlerin en sevdiğim kısmı. Geliştirdiğiniz özellikleri unit testler ile koruma altına alabilirsiniz.
Biz veya bir başkası bir gün bu kodda herhangi bir değişiklik yaptığında, eğer beklenmedik bir hataya sebep oluyorsa
bu hata daha önce bu kod için yazmış olduğumuz testler tarafından yakalanacaktır.&lt;/p&gt;

&lt;p&gt;Testleri yazılmış bir sınıfa yeni bir özellik eklediğimizde
genellikle yeni eklediğimiz özelliğin testlerine odaklanırız.
Bu yeni özellik düzgün çalışıyor olsa bile bu sınıfın mevcutta yerine getirebildiği bir özelliği
yerine getirememesine sebep olabilir.
Varolan bir kodun tüm uç senaryolarını tek tek test etmeyi çoğu zaman atlarız.
Böyle durumlarda varolan özelliklerin önceden yazılmış testlerinin olması istenmeyen hatalardan bizi korur.&lt;/p&gt;

&lt;p&gt;Ek olarak bu koruma bize özgüven verir.
Normalde canlıda çalışan ve kritik öneme sahip bir fonksiyonda bir değişiklik yapmak
en junior geliştiricisinden en senior geliştiricisine kadar herkesi korkutan bir süreçtir
ve fonksiyonun kritikliğine göre bazen tüm projenin baştan uçtan uca test edilmesine kadar götürebilir.
Unit testlerin varlığı o fonksiyonu değiştirme konusundaki cesaretimizi ve özgüvenimizi arttırır.
Yaptığımız değişikliğin başka bir şeyi bozmadığından emin olmamızı sağlar.&lt;/p&gt;

&lt;h4 id=&quot;unit-test-kodun-karmaşıklığını-azaltır-kalitesini-arttırır&quot;&gt;Unit Test Kodun Karmaşıklığını Azaltır, Kalitesini Arttırır&lt;/h4&gt;

&lt;p&gt;Unit test yazabilmek için en küçük yazılım bileşenlerinin bile tasarımında planlı olmamız gerekir.
Karmaşık, kompleks bir kodun testi de o kadar karmaşık ve yazması maliyetli olacaktır.
Bu maliyet bizi daha test edilebilir, daha ufak sınıflar/fonksiyonlar yazmaya zorlar.
Bu zorunda kalmışlık kodun daha okunabilir, daha az kompleks ve sonunda daha kaliteli olmasını sağlar.&lt;/p&gt;

&lt;p&gt;Test edilebilir kod yazmaya çalışmak başlangıçta zor gibi gelse de zamanla iyi bir alışkanlığa dönüşüyor.
Farkında olarak veya olmayarak
&lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID&quot;&gt;SOLID&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/KISS_principle&quot;&gt;KISS&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;DRY&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it&quot;&gt;YAGNI&lt;/a&gt;,
vb. bazı temel yazılım geliştirme prensiplerine uymamızı sağlar.
Testini yazdığımız bileşenleri bağımlı olduğu diğer kod parçalarından bağımsız, izole bir şekilde test etme gereksinimi
bu bileşenleri soyutlayabilmemizi ve tekrar kullanılabilir (reusable)
küçük parçalar halinde kodumuzu tasarlayabilmemizi sağlar.&lt;/p&gt;

&lt;p&gt;Bu sayede zamanla iki-üç satırlık küçük kodları bile ihtiyaç duyulan yerlere kopyala yapıştır yapmaktan,
ayrı bir sınıf/fonksiyon şekline çevirerek kullanan bir geliştiriciye doğru evrim geçirdiğimizi fark ederiz.&lt;/p&gt;

&lt;p&gt;Burada ayrıca ek bir noktaya da değinmeden geçmeyelim.
Ufak bir kodu kopyala yapıştır usulü yazdığımız her fonksiyonda,
o kod için tekrar tekrar test yazmamız gerekirken,
ayrı bileşen yolunu tercih edersek o bileşen için bir defa test yazmamız yeterli olur.
O bileşeni kullanan diğer fonksiyonlar, o bileşenin zaten test edildiğini bilerek
sadece kendi fonksiyonalitelerinin testlerine odaklanırlar.&lt;/p&gt;

&lt;h4 id=&quot;hata-bulmayı-debugging-kolaylaştırır&quot;&gt;Hata Bulmayı (Debugging) Kolaylaştırır&lt;/h4&gt;

&lt;p&gt;Yazılımda bir hata olduğunu ve sadece debug ederek bulabileceğiniz bir durum olduğunu düşünün.
Bunun için de tüm sistemi ayağa kaldırıp, arayüz üzerinden test verisi üretmeniz gerektiğini
ve sonra spesifik bir aksiyonu tetikleyip kodun tüm katmanlarında breakpoint’ler
yardımıyla satır satır debug ettiğinizi düşünün.&lt;/p&gt;

&lt;p&gt;Sistemin büyüklüğüne ve geliştiricinin sistem üzerindeki tecrübesine göre
bu hata arayışı saatlerce hatta tüm gün boyunca da sürebilir.&lt;/p&gt;

&lt;p&gt;Bunun yerine aynı şeyi unit testler ile yaptığımızı düşünelim.
Problemli olduğu düşünülen işlemin geçtiği kod bileşenlerine hataya sebep olabilecek test verilerinin
girdi olarak verildiği ve çıktıların kontrol edildiği bir birim test yazabiliriz.
Bu birim testi IDE üzerinde debug modda çalıştırabiliriz.
Bu esnada sadece o sınıfı debug etmiş oluruz.
Unit testlerde herhangi bir dış entegrasyon veya bağımlılık olmadığından test daha hızlı sonuçlanır.
Tüm uygulamayı veya tüm sistemi bilgisayarımızda ayağa kaldırmamış oluruz.
Hatayı bulma süreci daha hızlı ve daha az sancılı sonuçlanır.&lt;/p&gt;

&lt;p&gt;Hatayı tespit ederken ve çözerken oluşturduğumuz unit test kodu projenin artık bir parçasıdır
ve bu test senaryosu sayesinde aynı hatanın artık tekrarlanmayacağını da biliriz.&lt;/p&gt;

&lt;div class=&quot;alert alert-secondary pb-0&quot; role=&quot;alert&quot;&gt;
  &lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt; Bir projenin kendi bilgisayarımızda ayağa kaldırılarak debug edilmesi 
senaryosunu neden abarttığım anlaşılmıyor olabilir.
Çalıştığım bir mikro servis projesinde böyle bir debug yapabilmek için bazen bilgisayarımda 
3-4 tane farklı mikro servisi, bu mikro servislerin kullandığı Oracle DB, Cassandra gibi iki farklı veritabanını,
Kafka ile Zookeeper’ı ve Hazelcast uygulamasını ayağa kaldırmam gerekebiliyor.
Böyle bir ortamı, düşük sistem özelliklerine sahip bir bilgisayarda ayağa kaldıran geliştirici arkadaşların
bilgisayarlarında genellikle kod yazacak kadar bellek kalmıyor.&lt;/p&gt;
&lt;/div&gt;

&lt;h4 id=&quot;önemli-bir-ci-continuous-integration-sürekli-entegrasyon-adımıdır&quot;&gt;Önemli Bir CI (Continuous Integration, Sürekli Entegrasyon) Adımıdır&lt;/h4&gt;

&lt;p&gt;Sürekli Entegrasyon, veya İngilizcesi Continuous Integration, önemli bir yazılım geliştirme aracıdır.
Yazılımdaki her bir değişiklikte tüm sistemin build edilmesi
ve herhangi bir şeyin bozulmadığının kontrol edilmesi amacıyla yapılır.
Bu işlem genellikle Jenkins gibi araçlar ile otomatize şekilde gerçekleştirilir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/cicd_pipeline_infograph.png&quot; alt=&quot;CI CD Pipeline&quot; width=&quot;800px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unit testleri olmayan projelerde CI işlemi sadece projenin build olabildiğini,
derleyici hatası içermediğini garanti edebilir.
Unit testleri olan projelerde ise derleme sonrasında test kodu otomatik olarak çalışacağından
aynı zamanda varolan fonksiyonalitenin bozulmadığı da anlaşılmış olur.&lt;/p&gt;

&lt;p&gt;Biz ne kadar yazdığımız kod sonrası tüm testleri çalıştırıp kontrol ediyor olsak da,
kalabalık geliştirici ekiplerinde mutlaka bu kontrolü yapmadan
doğrudan repository’ye kodu gönderecek olan arkadaşlar çıkacaktır.
Aynı şeyi baskı altında kaldığımda, acilen bir fix göndermem gerektiğinde,
yoğun olduğumda vb. benim de yaptığım oluyor.
Bu gibi durumlarda daha ürünü paketleyip müşteriye teslim edemeden
Jenkins’den gelen bir “Build Failed” e-postası ile yaptığımız değişikliğin bozduğu testleri görüyoruz.&lt;/p&gt;

&lt;h3 id=&quot;sonuç&quot;&gt;Sonuç&lt;/h3&gt;

&lt;p&gt;Unit test yazı dizisinin bu yazısında neden unit test yazmamız gerektiğini inceledik.
Unit testlerin okunabilir, kaliteli ve hatasız kod yazabilmek için kullanabileceğimiz
en önemli araçlardan birisi olduğunu görmüş olduk.
Unit testler ile olası hatalardan korunan projelerde kodda değişiklik yaparken 
hiç testi olmayan projelere kıyasla gönlümüzün daha ferah olabileceğini öğrendik.&lt;/p&gt;

&lt;p&gt;Geliştirdiğimiz yazılımın kaliteli olması için 
geliştireceğimiz unit testlerin de kaliteli olması gerekir.
Bir sonraki yazımızda kaliteli unit test nasıl yazılır sorusunun cevabını arayacağız.&lt;/p&gt;
</description>
        <pubDate>Tue, 18 May 2021 20:05:00 +0000</pubDate>
        <link>https://serdarkuzucu.com/2021/05/18/neden-unit-test-yazariz/</link>
        <guid isPermaLink="true">https://serdarkuzucu.com/2021/05/18/neden-unit-test-yazariz/</guid>
        
        
        <category>Java</category>
        
        <category>Programlama</category>
        
        <category>Unit Test</category>
        
      </item>
    
      <item>
        <title>Unit Test 02: Unit Test'in Diğer Test Çeşitlerinden Farkları Nedir?</title>
        <description>&lt;p&gt;“Unit Test” yazı dizisinin bir önceki yazısında unit test nedir kısaca onu incelemiştik.
Şimdi diğer bazı test çeşitleri nelerdir ve unit testleri diğer test çeşitlerinden ayıran temel özellikler nelerdir
bunları inceleyeceğiz.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;diğer-test-çeşitleri-nelerdir&quot;&gt;Diğer Test Çeşitleri Nelerdir?&lt;/h2&gt;

&lt;p&gt;Kaliteli unit testler yazabilmemiz için unit testin ne olduğunu iyi anlamamız gerekiyor.
Bunu anlayabilmemiz için de diğer test çeşitlerini bilmemiz ve unit testleri diğer testlerden ayırabilmemiz gerekiyor.&lt;/p&gt;

&lt;p&gt;“Types of Software Testing” veya “Yazılım Test Çeşitleri” şeklinde araştırmaya başladığımızda
her biri ayrı bir makale olabilecek kadar çok sayıda test çeşidi olduğunu görüyoruz.
Hem iyi hem de kötü haber; bu test çeşitleri hangisi daha iyi
veya hangisini kullanmalıyım şeklinde karşılaştırabileceğimiz şeyler değil.
Hepsinin farklı bir amacı ve yazılım geliştirme ve devreye alma yaşam döngüsünde ayrı bir yeri var.&lt;/p&gt;

&lt;p&gt;Birçok kaynakta test çeşitlerinin öncelikle iki kümeye ayırıldığını görmekteyiz.
Ayrıca farklı kaynaklarda test çeşitlerinin ayrıldığı kümeler de değişebilmektedir.&lt;/p&gt;

&lt;p&gt;Testleri yapan veya hazırlayan kişinin bakış açısına göre test çeşitleri gruplandığında
&lt;a href=&quot;https://en.wikipedia.org/wiki/White-box_testing&quot; target=&quot;_blank&quot;&gt;“white-box testing”&lt;/a&gt; ve
&lt;a href=&quot;https://en.wikipedia.org/wiki/Black-box_testing&quot; target=&quot;_blank&quot;&gt;“black-box testing”&lt;/a&gt;
şeklinde ikiye ayrılmaktadır.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;White-box Testing:&lt;/strong&gt; Yazılımın iç yapısının nasıl kurgulandığının ve nasıl çalıştığının bilindiği
test türüdür. Yazılımın bütününü oluşturan parçaların doğru girdiler ile doğru çıktıları, davranışları
veya değişiklikleri üretebildiği test edilir. Unit testler çoğunlukla bu kategoriye dahildir.
Test ettiğimiz kod bir işlevi gerçekleştirirken diğer kod bileşenleri ile
kurduğu etkileşimleri de test etmiş oluruz bu seviyede.
Örneğin bir methodu birinci tetiklememizde veritabanına sorgu atması, sonucu cache kütüphanesine de kaydetmesi
ve ikinci tetiklememizde veritabanı yerine cache üzerindeki veriyi getirmesini test etmek istediğimizde
kodun işlevi kadar kullandığı diğer sınıfları veya fonksiyonları da bilmemiz gerekiyor.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Black-box Testing:&lt;/strong&gt; Yazılımın nasıl çalıştığı bilinmeden veya önemsenmeden fonksiyonalitesi test edilir.
Test yapanlar yazılımın iç yapısını bilmeden ve kaynak koda bakmadan,
son kullanıcıya beklenilen faydayı üretip üretemediğini doğrularlar.
Genellikle sistem seviyesi testlerdir fakat unit testlerde de bu yaklaşımın kullanıldığı uygulamalar olabilmektedir.
Örnek bir blackbox testi uygulama arayüzüne girip bir butona tıklamamız
ve sonrasında arayüzde gerçekleşen davranışı veya sonucu kontrol etmemiz olabilir.
Böyle bir testi yaparken sistemin hangi bileşenlerden oluştuğunu hatta hangi dil ile yazıldığını dahi
bilmemize gerek yoktur. Sistem bizim için tamamen bir kara kutudur.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Testin konusuna veya testin amacına göre kategorilere ayırdığımızda
genellikle şu iki kategorinin kullanıldığını görüyoruz:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_testing&quot; target=&quot;_blank&quot;&gt;Fonksiyonel Testler&lt;/a&gt;:&lt;/strong&gt;
Fonksiyonel gereksinimler belirli girdilere veya tetikleyicilere karşılık
sistemin hangi davranışları veya çıktıları üretmesini beklediğimizi belirler.
Fonksiyonel testler sistemin veya sistemdeki parçaların fonksiyonel gereksinimleri
doğru şekilde gerçekleştirdiğinin kontrolünün yapılmasını sağlar.
Duman Testi, (Smoke Testing), Doğruluk Testi (Sanity Testing), Sistem Testi, Entegrasyon Testi,
Tekrar veya Regresyon Testi (Regression Testing), vb. birçok test çeşidi bu gruba dahildir.
Birim test (Unit test) de birçok kaynakta fonksiyonel test olarak kategorilendirilmektedir
fakat unit testlerin yazılım geliştirme süreçlerindeki konumu konusunda epey tartışma mevcut.
Bu konuya ileride tekrar geleceğiz.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Non-functional_testing&quot; target=&quot;_blank&quot;&gt;Fonksiyonel Olmayan Testler&lt;/a&gt;:&lt;/strong&gt;
Fonksiyonel olmayan gereksinimlerin sağlanıp sağlanmadığının kontrolünü sağlar.
Yük testi, performans testi, güvenlik testi, vb. birçok test çeşidi fonksiyonel olmayan gereksinimlerin testleridir.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aşağıda birkaç farklı test çeşidinin tanımlarını örnek olarak yazacağım fakat burada yazdıklarımdan çok daha fazla
test çeşidi olduğunu da önceden belirteyim.
Daha fazla test çeşidini merak edip öğrenmek isterseniz yazının sonundaki kaynakçadaki linkleri takip edebilirsiniz.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Integration Test (Entegrasyon Testi):&lt;/strong&gt; Yazılım bileşenleri arasındaki arayüzlerin (interface)
ve etkileşimlerin (interaction) test edilmesi amacıyla yapılır.
Geliştirilen yazılım tarafından kullanılan veritabanı, cache server, entegre olunan başka uygulamalar,
farklı network bileşenleri, dosya sistemi, vb. sistemler ile geliştirilen yazılımın entegrasyonları test edilir.
Unit test ile çok karıştırılmaktadır ve bazılarımız unit test yazdığımızı sanarken
entegrasyon testi yazmışızdır birçok defa.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;System Test (Sistem Testi):&lt;/strong&gt; Tüm sistemin entegre olduğu dış bileşenler ile birlikte
gereksinimleri yerine getirip getiremediğinin test edilmesidir.
Elle manuel olarak koşulacak testler olabileceği gibi yazılım ile otomatize edilmiş test senaryoları da olabilir.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Regression Test (Regresyon/Tekrar Testi):&lt;/strong&gt; Kodda yapılan bir değişiklik sonrası sistemin geri kalanında bir hata
olup olmadığını anlamak amacıyla yapılır. Bu hatalar varolan bir özelliğin düzgün çalışmamaya başlaması veya
daha önce çözülmüş bir hatanın tekrar hortlaması şeklinde gerçekleşebilir.
Kodda yapılan değişikliğin veya yeni geliştirilen özelliğin değil, önceden varolan özelliklerin testidir.
Genellikle önceden yazılmış ve test edilmiş test senaryolarının tekrar çalıştırılmasıyla bu test yapılır.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Acceptance Test (Kabul Testi):&lt;/strong&gt; Uygulamayı alacak olan müşterinin kabul testidir.
Müşteri uygulamayı almak için belirlediği kabul kriterlerinin karşılanıp karşılanmadığını test eder.
Operasyonel kabul testi (Operational acceptance test, OAT), kullanıcı kabul testi (User acceptance test, UAT),
son kullanıcı testi (End-user test) gibi birçok çeşidi vardır.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Smoke Test (Duman Testi):&lt;/strong&gt; Uygulamanın hayati fonksiyonlarının hızlıca test edilerek daha ileri seviye testlere
hazır olup olmadığını anlamak amacıyla yapılır. Uygulama hatasız şekilde ayağa kalkıyor mu, ana sayfa açılıyor mu,
login olunabiliyor mu gibi basit senaryolar hızlıca test edilir. Basit senaryolarda hata varsa uygulama teste alınmaz.
Duman testi isminin elektronik donanım testlerinden geldiği rivayet ediliyor.
Bir elektronik devreyi elektriğe bağladığınızda duman çıktığını görürseniz
elektriği kesersiniz ve başka test yapmaya ihtiyaç kalmaz mantığı ile böyle bir isim verilmiş.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sanity Test (Doğruluk Testi):&lt;/strong&gt; Bu test duman testine benzerlik gösterse de aynı şey değil.
Doğruluk testinde, daha kapsamlı testlere geçmeden önce uygulamanın en önemli fonksiyonlarının
çalışıp çalışmadığı test edilir. Duman testinde uygulamanın kalp atışı gibi hayati fonksiyonlarının testi yapılırken
doğruluk testinde spesifik özellikler test edilir.
Bu bakımdan doğruluk testini Inomera’da geliştirdiğimiz uygulamaları müşterinin test ekibine teslim etmeden önce
test ekibine yaptığımız demoya benzetiyorum. Test ekibinin hazırladığı detaylı test senaryolarının arasından
önemli özelliklere ait birkaç tane test senaryosu seçiliyor ve uygulama o testlerden başarıyla geçtikten sonra
test ekibi detaylı testlere başlıyor.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Performance Test (Performans Testi):&lt;/strong&gt; Belirli bir iş yükünün altında sistemin nasıl performans gösterdiğinin
ölçülmesi işlemidir. Performans testlerinde sistemin yük altında cevap süresinde uzama oluyor mu,
bellek, işlemci veya disk gibi kaynak tüketimleri ne seviyelerde artıyor,
uygulamanın kullanılabilirliği ne derece etkileniyor, uygulama aynı anda kaç kullanıcıya cevap verebiliyor
gibi birçok metrik ölçümlenir. Yazılım yukarı ve aşağı yönde ölçeklenebilir bir yapıdaysa yük arttığında
gerçekten instance sayısı artıyor mu veya yük kesildiğinde azalıyor mu kontrolleri yapılır.
Sık kullanıldığını gördüğüm ve birbirine karıştırılan iki performans testi çeşidi şunlardır:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Load Test (Yük Testi):&lt;/strong&gt; Belirli bir yükün/trafiğin altında sistemin ölçülmesi.
Sistemin desteklemek için tasarlandığı ortalama ve/veya maksimum yük miktarı ile yapılmalıdır.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Stress Test (Stres Testi):&lt;/strong&gt;
Sistemin taşımak için tasarlandığından daha fazla yük altında nasıl davrandığının ölçülmesidir.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Security Test (Güvenlik Testi):&lt;/strong&gt; En kaba tabiriyle sistemin hacklenmesinin engellenmesi
ve yetki gerektiren verinin sadece yetkili kullanıcılar tarafından kullanılabildiğinin görülmesi için yapılır.
Hassas verilerin yetkisiz kullanıcıların eline geçmeyeceğinin kontrolüdür.
Çalıştığım projelerde müşterilerin güvenlik ekipleri tarafından Fortify gibi programlar ile
statik kod analizi yapıldığına ve sızma testi (Penetration Test) gibi çeşitli araçlar ile
çeşitli güvenlik açıkları arandığına şahit oldum.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yazılımda daha birçok test çeşidi, kategorisi, yöntemi, vb mevcut.
Bu yazının konusunun dışına fazla çıkmamak için genel kültür amaçlı yazdığım bu başlığı burada kesiyorum.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a id=&quot;unit-test-vs-diger-testler&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;unit-testi-diğer-testlerden-ayıran-özellikler-nelerdir&quot;&gt;Unit Testi Diğer Testlerden Ayıran Özellikler Nelerdir?&lt;/h2&gt;

&lt;p&gt;Bazı diğer test çeşitlerini yukarıda liste halinde gördükten sonra unit testlerin bu testlerden farkına bakalım.
Buradaki bazı özellikler aynı zamanda daha sonraki yazılarda ele alacağımız 
“Nasıl Unit Test Yazmalıyız” gibi başlıklarda da karşımıza gereksinim olarak çıkacak.&lt;/p&gt;

&lt;h4 id=&quot;unit-testlerin-kapsamı-küçüktür&quot;&gt;Unit Testlerin Kapsamı Küçüktür&lt;/h4&gt;

&lt;p&gt;Öncelikle unit testlerin en büyük farkı kapsamlarıdır.
Çok küçük kod parçalarını test ederler.
Bir araba üreticisi olduğumuzu düşünelim.
Bu arabada kullanılan vidaların uygun bir delik üzerinde dik konumda doğru yönde çevirildiğinde
deliğe girip girmediğini arabadaki diğer parçalardan bağımsız şekilde test etmemiz bir unit testtir.
Bu vidanın ters yönde çevirildiğinde delikten çıktığını doğrulamamız da ikinci bir unit testtir.&lt;/p&gt;

&lt;h4 id=&quot;unit-testleri-çalıştırmak-hızlıdır&quot;&gt;Unit Testleri Çalıştırmak Hızlıdır&lt;/h4&gt;

&lt;p&gt;Unit testler, her bir ufak kod değişikliğinde geliştiricilerin çok az vakitlerini harcayarak uygulamadaki
tüm unit testleri baştan sona çalıştırabileceği kadar hızlıdır. Hızlı olmalıdır.&lt;/p&gt;

&lt;p&gt;Bir geliştiriciden yeni bir özellik geliştirdiğinde elle tüm uygulama özelliklerini
arayüz veya API kullanarak test etmesini bekleyemezsiniz fakat tüm birim testleri çalıştırmasını
bir kural haline getirebilirsiniz.&lt;/p&gt;

&lt;p&gt;Bir şirket sunucusuna Jenkins gibi bir continuous integration ortamı kurup her bir kod değişikliğinde
tüm testlerin otomatik olarak çalışmasını ve birisi testleri patlattığında
tüm ekibe e-posta göndermesini sağlayabilirsiniz.&lt;/p&gt;

&lt;h4 id=&quot;unit-test-kolay-yazılır&quot;&gt;Unit Test Kolay Yazılır&lt;/h4&gt;

&lt;p&gt;Sistem testi veya entegrasyon testi gibi testleri yazmak çok zaman alır ve daha fazla kod gerektirir.
Bu tip testlerde sistemin belirli bir durumda olması simüle edilir ve bunun için veritabanına, diske, cache server’a,
vb. birçok ortama kod ile data üretmek, test sonunda bu datayı temizlemek gibi işlemler yapmak gerekir.&lt;/p&gt;

&lt;p&gt;Unit testler ise çok küçük bir kod parçası için yazıldığından çok daha kolay yazılır.
Unit testlerde bağımlı olunan veritabanı veya network katmanı gibi dış faktörler tamamen ortadan kaldırılır.
Bu tür bağımlılıkların davranışları da simüle edilerek sadece test edilen sınıf/metod
ile ilgili senaryolar test edilmiş olur.&lt;/p&gt;

&lt;h4 id=&quot;unit-test-bir-test-süreci-değildir&quot;&gt;Unit Test Bir Test Süreci Değildir&lt;/h4&gt;

&lt;p&gt;Hatta bu başlığın daha tartışmaya açık hali “Unit test test değildir” şeklinde ve ben de katılıyorum.
Unit test, test değil geliştirmedir. Yazılım geliştirme sürecinin ayrılmaz bir parçasıdır.
Testçi değil geliştirici tarafından yazılır.
Geliştiricinin “ben bu kodu geliştirdim ve bu kod parçasının çalıştığına kefilim” deme şeklidir.
Inomera’da çalıştığım ekipte bir süredir geliştiricilerin bir işi bitirebilmesi için
unit testlerinin yazılmış olması ön koşulunu uyguluyoruz.
Unit testi yazılmamış geliştirmeyi geliştirilmiş saymıyoruz.&lt;/p&gt;

&lt;h4 id=&quot;unit-test-sistemin-çalıştığını-göstermez&quot;&gt;Unit Test Sistemin Çalıştığını Göstermez&lt;/h4&gt;

&lt;p&gt;Tüm unit testler başarıyla çalışsa bile bu bize sistemin doğru şekilde çalışacağını,
hatta ayağa kalkacağını bile göstermez.
Unit testler sistem seviyesinde bilgi vermezler.
Geliştirdiğimiz ürünün fonksiyonel gereksinimlerinin karşılandığını göstermezler.&lt;/p&gt;

&lt;p&gt;Unit test sadece geliştirilen kod parçalarının veya fonksiyonların doğru geliştirildiğini gösterir.
Bu bakımdan her bir satırı unit testler tarafından kapsanmış (coverage) bir kodun
hala diğer test çeşitlerine ihtiyacı vardır.&lt;/p&gt;

&lt;p&gt;Unit testler ile doğruluğu ispatlanmış kod parçaları bir araya geldiğinde entegrasyon sorunları,
iş akışı hataları veya eksik özellikleri olabilir.
Bu sebeple entegrasyon testi, duman testi, doğruluk testi, fonksiyonel testler,
güvenlik testleri, performans testleri, vb. tüm testler gereklidir
ve unit test yaptık test ekibine ihtiyacımız yok diyemeyiz.&lt;/p&gt;

&lt;h4 id=&quot;test-piramidi&quot;&gt;Test Piramidi&lt;/h4&gt;

&lt;p&gt;Hazır bu karşılaştırma işine bulaşmışken test piramidinden de bahsedelim.
Test piramidi epey farklı çeşitleri olan fakat özünde aynı konuyu açıklayan bir görsel.
Piramidin amacı test çeşidine göre yazılması gereken test miktarının
ve bu çeşitlerdeki testlerin özelliklerinin görselleştirilmesi.&lt;/p&gt;

&lt;p&gt;Aşağıdaki görseli &lt;em&gt;Jessie Leung&lt;/em&gt;
&lt;a href=&quot;https://betterprogramming.pub/the-test-pyramid-80d77535573&quot; target=&quot;_blank&quot;&gt;The Test Pyramid&lt;/a&gt;
başlıklı blog yazısında paylaşmış.
Piramidin internetteki birçok çeşidi arasından benim en beğendiğim hali bu oldu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/test-pyramid.png&quot; alt=&quot;Test Piramidi&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Piramidin altına doğru indikçe genişlemesi yazmamız gereken test miktarının artması gerektiğini göstermekte.
Unit testlerin sayıca diğer testlerden fazla olması gerektiğini buradan anlıyoruz.
Piramitte aşağı indikçe testlerin daha hızlı ve geliştirme maliyetinin daha düşük olması gerektiğini görüyoruz.
Yukarı çıkıldığında ise hem testlerin çalışma süresi, hem de testleri geliştirmek için harcanan süre artıyor.
Bu da testlerin geliştirme maliyetini arttırıyor. Bu aynı zamanda bakım (maintenance) maliyetini de arttırıyor.&lt;/p&gt;

&lt;p&gt;Sadece unit test yazmıyorsak, entegrasyon testi ve uçtan uca (end-to-end, e2e) test de yazıyorsak,
bu piramide uymamızda fayda var. Yoksa geliştirme maliyeti, bakım maliyeti
ve zaman kaybı işin içinden çıkamayacağımız noktalara gelebilir.&lt;/p&gt;

&lt;p&gt;Ek olarak bu konuda en önemli nokta bence unit testler ile diğer test çeşitlerini
her ne kadar kodlayarak geliştiriyor olsak da ayrı yazmamız gerekiyor.
Unit testler ile aynı test suite içerisinde geliştirdiğimiz diğer test çeşitleri
geliştiricilerin unit testleri çalıştırmasını çok uzun süren bir süreç haline getirerek
bir süre sonra testleri hiç çalıştırmadan kod yazan geliştiricilerin çoğalmasına sebep olacaktır.&lt;/p&gt;

&lt;p&gt;Farklı test çeşitleri gradle ile birbirinden nasıl ayrılır konusu
tamamen başka bir yazıda anlatılabilecek bir konu fakat merak edenler için &lt;em&gt;Petri Kainulainen&lt;/em&gt; tarafından yazılmış
“&lt;a href=&quot;https://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-integration-testing/&quot; target=&quot;_blank&quot;&gt;Getting Started With Gradle: Integration Testing&lt;/a&gt;”
başlıklı yazıdan bir fikir edinebilirler.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;sonuç&quot;&gt;Sonuç&lt;/h2&gt;

&lt;p&gt;Unit test yazı dizisinin bu yazısında diğer test çeşitlerinin bazılarının ne olduğunu
ve unit testleri diğer test çeşitlerinden ayıran temel özellikleri inceledik.&lt;/p&gt;

&lt;p&gt;Bu yazıdaki birçok madde ilerleyen başlıklarda da önümüze tekrar tekrar çıkacaktır.
Unit testlerin özellikleri bunlardır dediğimizde, 
her yazdığımız unit test metodu doğuştan bu özelliklere sahiptir demiş olmuyoruz.
Bizim kendimizin bu özelliklere sahip olacak şekilde unit test yazmamız gerekiyor.&lt;/p&gt;

&lt;p&gt;Projelerimizin selameti için, unit test yazmayı kolaylaştırmalıyız, zorlaştırmamalıyız.&lt;/p&gt;

&lt;p&gt;Buraya kadar okuduğunuz için teşekkürler, umarım herkese faydalı olmuştur.
Bir sonraki yazımızda “Neden Unit Test Yazarız?” sorusuna cevaplar arayacağız.&lt;/p&gt;
</description>
        <pubDate>Tue, 18 May 2021 20:00:00 +0000</pubDate>
        <link>https://serdarkuzucu.com/2021/05/18/unit-test-ve-diger-test-cesitlerinin-farklari/</link>
        <guid isPermaLink="true">https://serdarkuzucu.com/2021/05/18/unit-test-ve-diger-test-cesitlerinin-farklari/</guid>
        
        
        <category>Java</category>
        
        <category>Programlama</category>
        
        <category>Unit Test</category>
        
      </item>
    
      <item>
        <title>Unit Test 01: Unit Test Nedir?</title>
        <description>&lt;p&gt;Yazılımcılar ikiye ayrılır. Unit test yazanlar ve unit test yazmayanlar.
Bazen vakit yok deriz, bazen zor gelir, bazen proje/kod test yazmaya uygun değil deriz.
Unit test yazmak istemediğimizde bu saydıklarım gibi çok fazla miktarda bahaneler üretebiliriz
ve üretebileceğimiz bahanelerin de hemen hemen hepsini daha önce başkalarından da duymuşuzdur.
Bu yazı dizisinde unit test konusu ile ilgili birçok soruya cevaplar arayarak 
kaliteli yazılım geliştirme basamaklarından birkaç tanesini hep birlikte tırmanmaya çalışacağız.&lt;/p&gt;

&lt;!--more--&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_twoPlusTwo_returnsFour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unit test, dışarıdan bakıldığında yukarıdaki kod örneğinde olduğu gibi basit bir şey
gibi görünse de, içine girildiğinde derya denizdir.
Etkili unit test yazmanın çeşitli zorlukları vardır.
Çoğumuz bu zorlukları aşamayıp test yazmamayı tercih ederiz.
Kimimiz yazdımız testlerin unit test olduğunu zannederiz fakat aslında bambaşka bir test türüdür.
Ben bu sınıflandırmaların hepsinin içinde bizzat kendim de bulundum 
ve bu konuda hala kendimi geliştirebileceğim çok fazla nokta var.
Zaten kaliteli yazılım geliştirme serüveninde &lt;u&gt;ben artık tamamım&lt;/u&gt; 
diyebileceğimiz bir nokta bulunmuyor.&lt;/p&gt;

&lt;p&gt;Unit test yazmak üzerine hazırladığım bu yazı dizisini aslında &lt;em&gt;17 Mayıs 2021&lt;/em&gt; tarihinde
tek bir yazı olarak yayınlamıştım fakat geri bildirim amacıyla ön gösterim olarak paylaştığım 
birkaç iş arkadaşımdan ve eşimden “çok uzun olmuş kimse sonuna kadar okumaz” 
geri bildirimini aldığım için parçalara böldüm. 
Parçalara böldükçe parçalarda girebildiğim detay miktarı da arttı bu sayede.
Umarım siz de okurken benim yazarken aldığım keyfi alırsınız.&lt;/p&gt;

&lt;p&gt;Yazı dizimizin bu ilk yazısında “Unit Test Nedir?” sorusunu cevaplayarak hızlı bir giriş yapacağız.
Daha detaylı ve daha keyifli konular sonraki yazılarda bizleri bekliyor olacak.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;unit-test-nedir&quot;&gt;Unit Test Nedir?&lt;/h2&gt;
&lt;p&gt;&lt;a id=&quot;unit-test-nedir&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unit test uygulamamızın küçük bir parçasını 
uygulamanın geri kalanından bağımsız bir şekilde çalıştırarak
bu parçanın davranışını doğrulayan bir metoddur.&lt;/p&gt;

&lt;p&gt;Unit test yazdığımız kodun davranışını yine kod yazarak doğrulamamızı sağlar.
Yazılan bu test kodları, canlıya çıkacak olan production kodları ile aynı projede farklı bir klasörde tutulur.
Örneğin çoğu Java projesinde genellikle &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/main/java&lt;/code&gt; klasöründe production kodları bulunurken,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/test/java&lt;/code&gt; klasöründe ise unit test kodları bulunur.&lt;/p&gt;

&lt;p&gt;Unit testler production build sırasında kullandığımız &lt;strong&gt;maven&lt;/strong&gt;, &lt;strong&gt;gradle&lt;/strong&gt;, vb. build araçları tarafından
varsayılan olarak çalıştırılırlar.
Testlerde oluşacak herhangi bir hatada build işlemi hata verir ve tamamlanmaz.
Build tamamlandıktan sonra üretilmiş olan son çıktıda ise test kodu bulunmaz.
Yani canlı ortama (production) test kodu çıkmamış olur.&lt;/p&gt;

&lt;p&gt;Test kodları genellikle bir test framework aracılığıyla çalıştırılır.
Hangi test framework’ünün kullanılacağı projedeki önemli bir karardır.
Yazılan test kodları bu test framework’ünün sağladığı özelliklere oldukça bağımlıdır.
Okuduğum çoğu yazıda en popüler unit test framework listesinde 
&lt;a href=&quot;https://junit.org/&quot; target=&quot;_blank&quot;&gt;JUnit&lt;/a&gt; ve &lt;a href=&quot;https://testng.org/&quot; target=&quot;_blank&quot;&gt;TestNG&lt;/a&gt; başı çekmekte.
Ben de bu yazıdaki örneklerde (ve kişisel hayatım ile iş hayatımda) &lt;strong&gt;JUnit&lt;/strong&gt; kullanıyor olacağım.&lt;/p&gt;

&lt;p&gt;Tipik bir unit test metodu genellikle üç aşamadan oluşur.
Bu aşamalar yabancı kaynaklarda &lt;u&gt;The AAA(Arrange-Act-Aspect) Pattern&lt;/u&gt; olarak geçer.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;b&gt;Arrange:&lt;/b&gt; Test edilecek koda verilecek olan input parametrelerinin belirlendiği 
ve test edilecek olan kodun bağımlı olduğu diğer bileşenlerin 
test anındaki bulunacakları durumlarının tanımlandığı kısımdır.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;b&gt;Act:&lt;/b&gt; Test edilecek olan kodun çalıştırıldığı aşamadır.
Bu aşamada test edilecek olan fonksiyonu/metodu tetikleriz.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;b&gt;Assert:&lt;/b&gt; Test sonuçlarının doğrulanması aşamasıdır.
Tetiklenen fonksiyon doğru sonucu üretiyor mu 
veya bağımlı olduğu bileşenler üzerinde beklenen aksiyonları tetikliyor mu kontrolünü bu aşamada yaparız.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bu aşamalar aşağıdaki test kodu üzerinde daha net görebiliriz:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByName_exactMatchWithTwoPersons_returnsBothOfThemInInsertionOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Arrange&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneBook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PhoneBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;phoneBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;James&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Malkovic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+905554443321&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;phoneBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Doe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+905554443322&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;phoneBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+905554443323&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;phoneBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Baz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+905554443324&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Act&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Assert&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Doe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+905554443322&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Baz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+905554443324&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Burada unit testleri “Assert” fazında doğrulayacağı davranışa göre iki kategoriye ayırmışlar bazı kaynaklarda.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;state-based&lt;/strong&gt;: Test edilen kodun çıktılarının veya sistemde oluşturduğu durum (state) değişikliğinin
kontrol edilmesi durumunda “state-based” test yazmış oluyoruz.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;interaction-based&lt;/strong&gt;: Test edilen kodun belirli fonksiyonları doğru şekilde tetiklediğini (doğru etkileşim) 
doğrulayan bir test yazdığımızda “interaction-based” bir test yazmış oluyoruz.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ben de yazdığım testlerde bu iki kategori arasındaki ayrıma dikkat etmeye çalışıyorum.
Eğer bir kod hem bazı başka bileşenlerle etkileşimde bulunuyorsa hem de bir sonuç dönüyorsa,
ikisini aynı testte yapmak yerine bir tane “state-based” bir tane de “interaction-based” test yazıyorum.&lt;/p&gt;

&lt;p&gt;Aşağıdaki gibi pencere ve ışık kaynaklarından oluşan bir oda (Room) sınıfı hayal edelim:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Room&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LightSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lightSources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Room&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LightSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lightSources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;windows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lightSources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lightSources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toggleLightSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switchNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;switchNo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switchNo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lightSources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Invalid switch no: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switchNo&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, number of light sources: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lightSources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lightSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lightSources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;switchNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lightSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getOpenWindowCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Window:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isOpen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu sınıfın &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getOpenWindowCount&lt;/code&gt; metodu için basit bir 
state-based unit test örneği yazmak istersek aşağıdaki gibi bir örnek olabilir:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getOpenWindowCount_twoWindowsAreOpen_returnsTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lightSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LightSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOpen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOpen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOpen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;room&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Room&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lightSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;openWindowCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;room&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOpenWindowCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;openWindowCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu metodda asıl önemli olan yaptığı hesaplama ve döndüğü değer olduğu için 
happy-path testinde bu şekilde ilerlemek doğru görünüyor.&lt;/p&gt;

&lt;p&gt;Bu sınıftaki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toggleLightSource&lt;/code&gt; metodunda ise odadaki spesifik bir ışığı yakmayı hedefliyoruz. 
Işığın yanmasına dair asıl sorumluluk ise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LightSource&lt;/code&gt; sınıfında olduğundan, 
esas test etmek istediğimiz doğru &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LightSource&lt;/code&gt; nesnesinin üzerindeki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toggle&lt;/code&gt; methodunun tetiklendiğini görmek.
Burada &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Room&lt;/code&gt; ile &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LightSource&lt;/code&gt; sınıfları arasındaki etkileşimi test etmeye çalışıyoruz.
Bu da bir interaction-based unit test olacaktır ve aşağıdaki gibi bir örnek verebiliriz:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toggleLightSource_validSwitchNo_callsToggleMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstLightSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LightSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondLightSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LightSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;room&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Room&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstLightSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondLightSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondLightSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;room&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toggleLightSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondLightSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sonuç&quot;&gt;Sonuç&lt;/h2&gt;

&lt;p&gt;Bu yazımızda unit test nedir basit bir giriş yapmış olduk.
Unit test ile ilgili yazı dizisinin ilerleyen başlıklarında daha konuşacak birçok konumuz olacak.&lt;/p&gt;

&lt;p&gt;Bir sonraki yazıda diğer test çeşitlerinden ve unit testi diğerlerinden ayıran özellikleri inceleyeceğiz.&lt;/p&gt;

</description>
        <pubDate>Mon, 17 May 2021 23:51:25 +0000</pubDate>
        <link>https://serdarkuzucu.com/2021/05/18/unit-test-nedir/</link>
        <guid isPermaLink="true">https://serdarkuzucu.com/2021/05/18/unit-test-nedir/</guid>
        
        
        <category>Java</category>
        
        <category>Programlama</category>
        
        <category>Unit Test</category>
        
      </item>
    
      <item>
        <title>Gradle: Spring Boot &amp; Angular Uygulamalarını Birlikte Build Edelim</title>
        <description>&lt;p&gt;Yeni bir projeye başlamanın en sıkıcı maddelerinden birisi de projeyi oluşturup 
her projede kullandığımız basmakalıp (boilerplate) kodları yazmaktır.
Build aracını (maven, gradle, vs) seçmek, bağımlılıkları build aracına eklemek,
kullanılan frameworklerin (spring, angular, vs) konfigürasyonlarının yapılması gibi
her projede tekrar tekrar yaptığımız işler vardır 
ve bir kişi o işi yapıp projeyi repository’ye atmazsa 
ekibin geri kalanı projede yazılım geliştirmeye başlayamaz.
Genellikle bu işlem varolan bir projeyi kopyalayıp içinde yeni projeye lazım olmayan
ne var ne yok silmek şeklinde yapılsa da 
bazen yeni bir proje yapısını gerektiren durumlar oluşabilir.
2018 yılında backend için Spring Boot ve frontend için Angular framework’lerini
kullanmaya karar verdiğimizde ekip için bu yeni bir proje yapısıydı 
ve biraz araştırıp bu iki arkadaşı bir arada kullanmanın proje için 
en uygun yolunu bulmam gerekmişti. 
O günden beri ekip olarak birçok projede kullandığımız bu proje yapısını 
sıfırdan bir proje oluşturarak anlatmaya çalışacağım.&lt;/p&gt;

&lt;!--more--&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
Tüm yazıyı okumak istemeyen arkadaşlar doğrudan şu linke tıklayarak 
bu yazıyı yazarken geliştirdiğim örnek uygulamayı Github hesabımda inceleyebilirsiniz:
&lt;a href=&quot;https://github.com/sedran/spring-boot-angular-gradle-example&quot;&gt;sedran/spring-boot-angular-gradle-example&lt;/a&gt; 
&lt;/div&gt;

&lt;p&gt;Aşağıda adım adım projeyi sıfırdan nasıl oluşturduğumu anlatıyor olacağım.
Ben bu projeyi oluştururken IDE olarak Intellij IDEA kullanıyorum.
Başka bir IDE kullanarak denemek istiyorsanız anlatacaklarımın o IDE’deki
karşılıklarını bilmeniz veya bir şekilde bulmanız gerekecektir.&lt;/p&gt;

&lt;p&gt;Ek olarak projeyi build edebilmek ve bazı adımları tamamlayabilmek için
bilgisayarınızda “npm” ve “ng” (Angular CLI) araçlarının da yüklü olması gerekmektedir.&lt;/p&gt;

&lt;h2 id=&quot;adım-1-gradle-projesi-oluşturalım&quot;&gt;Adım 1: Gradle Projesi Oluşturalım&lt;/h2&gt;

&lt;p&gt;Öncelikle Intellij IDEA menüsünden &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File &amp;gt; New &amp;gt; Project&lt;/code&gt; 
yolunu takip ederek yeni proje oluşturma diyaloğunu açıyoruz 
ve bu diyalogda sol tarafta “Gradle” seçeneğini işaretliyoruz.
Sağ tarafta ise hiçbir seçeneği işaretlemeden Next butonuna basıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-10-spring-boot-angular-gradle/01-new-gradle-project.png&quot; target=&quot;_blank&quot;&gt;
  &lt;img border=&quot;0&quot; height=&quot;600&quot; src=&quot;/assets/posts/2021-01-10-spring-boot-angular-gradle/01-new-gradle-project.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sonraki adımda proje ile ilgili bazı temel bilgiler soruluyor. 
Bunları keyfimize göre doldurup proje oluşturmayı tamamlıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-10-spring-boot-angular-gradle/02-new-gradle-project.png&quot; target=&quot;_blank&quot;&gt;
  &lt;img border=&quot;0&quot; height=&quot;600&quot; src=&quot;/assets/posts/2021-01-10-spring-boot-angular-gradle/02-new-gradle-project.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;adım-2-angular-uygulaması-oluşturalım&quot;&gt;Adım 2: Angular Uygulaması Oluşturalım&lt;/h2&gt;

&lt;p&gt;Bu adımda frontend tarafı olan angular uygulamasını yaratacağız.
Bir terminal açıp projenin olduğu dizine gidelim 
ve Angular CLI aracılığıyla frontend isimli projemizi oluşturalım.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/path-to-project
ng new frontend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Komutu çalıştırdığımızda Angular CLI bir takım sorular soracak.
Bu soruları tercihimize göre cevaplıyoruz.
Uygulama oluşturma tamamlandığında frontend isimli bir klasör
ve içerisinde boş bir Angular hello world uygulamasının oluştuğunu göreceğiz.&lt;/p&gt;

&lt;p&gt;Ana projemizi zaten versiyon kontrol sisteminde tutacağımız için frontend klasöründe
otomatik olarak oluşturulan git repository’sine ihtiyacımız yok.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frontend/.git&lt;/code&gt; klasörünü hiç düşünmeden silebiliriz.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;frontend
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; .git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Terminalde frontend klasörünün içerisinde &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ng serve&lt;/code&gt; komutunu yazdığımızda
projenin “Angular Live Development Server” üzerinde ayağa kalktığını ve
&lt;a href=&quot;http://localhost:4200/&quot;&gt;http://localhost:4200/&lt;/a&gt; adresinden otomatik olarak üretilmiş
Welcome sayfasına ulaşabildiğimizi görüyoruz.&lt;/p&gt;

&lt;p&gt;Angular projeleri npm paket yöneticisini kullanır ve Angular CLI denen
nodejs ile çalışan bir araç tarafından build edilirler.
Biz “frontend” projesini de gradle ile build etmek istediğimiz için
frontend klasörünün içerisinde aşağıdaki gibi bir &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; dosyası oluşturuyoruz.&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frontendProjectDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${rootProject.projectDir}/frontend&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Bu dosyalar değişmediği sürece gradle up-to-date check sayesinde &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ng build komutu tetiklenmeyecek. Ön yüz tarafında değişiklik olmadığı&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// build'lerde build süresini oldukça kısaltacaktır.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;angularFiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fileTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;dir:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frontendProjectDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;includes:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;src/**/*.ts&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;src/**/*.html&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;src/**/*.json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;src/**/*.css&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;src/**/*.scss&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;package.json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;package-lock.json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;angular.json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;tsconfig.json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;src/assets/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;node_modules/**&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buildAngular&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angularFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${frontendProjectDir}/dist&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// installAngular should be run prior to this task&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;npmInstall&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;workingDir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${frontendProjectDir}&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Add task to the standard build group&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BasePlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BUILD_GROUP&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ng doesn't exist as a file in windows -&amp;gt; ng.cmd&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;os.name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;WINDOWS&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;commandLine&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;npm.cmd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;run&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;buildProd&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;commandLine&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;npm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;run&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;buildProd&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;npmInstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${frontendProjectDir}/package.json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${frontendProjectDir}/node_modules&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;workingDir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${frontendProjectDir}&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BasePlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BUILD_GROUP&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;os.name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;WINDOWS&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;commandLine&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;npm.cmd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;install&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;commandLine&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;npm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;install&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;buildAngular&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“frontend” klasöründeki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; dosyasında &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scripts&lt;/code&gt; anahtarının içerisine
aşağıdaki gibi &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buildProd&lt;/code&gt; komutunu ekliyoruz. 
Dosyayı aşağıdaki gibi değiştirmeyin komple, sadece bir kısmını yazdım.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ng&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ng&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ng serve&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ng build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;buildProd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ng build --prod&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ng test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;lint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ng lint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;e2e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ng e2e&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“package.json” dosyasına eklediğimiz &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ng build --prod&lt;/code&gt; komutu build.gradle
dosyasındaki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buildAngular&lt;/code&gt; gradle taskı tarafından tetikleniyor.
Asıl build işini sistemimize daha önceden kurduğumuz “Angular CLI” aracı yapıyor.
Gradle burada sadece bir tetikleyici durumunda fakat backend projesi gradle
tarafından build edileceği için ikisini birbirine bağlamamızda 
bu konfigürasyonun oldukça faydası olacak.&lt;/p&gt;

&lt;p&gt;“frontend” projesinin bir gradle projesi olarak ana proje tarafından görülmesi için
ana proje klasöründeki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;settings.gradle&lt;/code&gt; dosyasını da şu şekilde düzenliyoruz:&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rootProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'springangulardemo'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;':frontend'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En sonunda ana proje dizininde &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./gradlew build&lt;/code&gt; komutunu çalıştırdığımızda 
aşağıdaki gibi bir çıktı verince angular projemizin gradle ile build olduğunu
görmüş oluyoruz.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; Task :frontend:npmInstall
audited 1460 packages in 5.331s

67 packages are looking for funding
  run `npm fund` for details

found 2 low severity vulnerabilities
  run `npm audit fix` to fix them, or `npm audit` for details

&amp;gt; Task :frontend:buildAngular

&amp;gt; frontend@0.0.0 buildProd /Users/serdarkuzucu/projects/personal/blog/springangulardemo/frontend
&amp;gt; ng build --prod

Generating ES5 bundles for differential loading...
ES5 bundle generation complete.

chunk {0} runtime-es2015.0dae8cbc97194c7caed4.js (runtime) 1.45 kB [entry] [rendered]
chunk {0} runtime-es5.0dae8cbc97194c7caed4.js (runtime) 1.45 kB [entry] [rendered]
chunk {2} polyfills-es2015.f332a089ad1600448873.js (polyfills) 36.1 kB [initial] [rendered]
chunk {3} polyfills-es5.177e85a9724683782539.js (polyfills-es5) 129 kB [initial] [rendered]
chunk {1} main-es2015.05e26c45cc5c75825871.js (main) 217 kB [initial] [rendered]
chunk {1} main-es5.05e26c45cc5c75825871.js (main) 259 kB [initial] [rendered]
chunk {4} styles.09e2c710755c8867a460.css (styles) 0 bytes [initial] [rendered]
Date: 2021-01-10T17:21:55.929Z - Hash: 1d60d39f7d1df34a5244 - Time: 32218ms

BUILD SUCCESSFUL in 47s
2 actionable tasks: 2 executed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Angular kısmı bu kadar. 
Sonraki adıma geçebiliriz.&lt;/p&gt;

&lt;h2 id=&quot;adım-3-spring-boot-uygulaması-oluşturalım&quot;&gt;Adım 3: Spring Boot Uygulaması Oluşturalım&lt;/h2&gt;

&lt;p&gt;Yeni bir Spring Boot uygulaması oluştururken yaptığım şey genellikle çoğu insan gibi
https://start.spring.io/ adresine girip ihtiyacım olan bağımlılıkları seçip 
projeyi zip olarak indirmek. 
Bu sefer onun yerine ihtiyacım olan bağımlılıkları seçip sadece &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;
dosyasını kopyalayacağım.&lt;/p&gt;

&lt;p&gt;Spring Boot projesini aşağıdaki gibi starter arayüzünden konfigüre ettim:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-10-spring-boot-angular-gradle/03-start-spring-io.png&quot; target=&quot;_blank&quot;&gt;
  &lt;img border=&quot;0&quot; height=&quot;500&quot; src=&quot;/assets/posts/2021-01-10-spring-boot-angular-gradle/03-start-spring-io.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Daha sonra sayfanın altında bulunan “EXPLORE” butonuna basarak 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; dosyasının içeriğini kopyalıyoruz.&lt;/p&gt;

&lt;p&gt;Ana projenin içerisinde “frontend” klasörüne komşu olacak şekilde 
“backend” isminde bir klasör oluşturuyoruz.
“backend” klasörünün içerisinde &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; isimli bir dosya oluşturuyoruz
ve Spring Boot starter sitesinden kopyaladığımız “build.gradle” dosya içeriğini
bu yeni dosyanın içerisine yapıştırıyoruz.&lt;/p&gt;

&lt;p&gt;Daha sonra bu dosyanın sonuna aşağıdaki satırları da ekliyoruz:&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bootJar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;':frontend:buildAngular'&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'BOOT-INF/classes'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${project(':frontend').projectDir}/dist&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“dependsOn” ile backend projesi build edilmeden önce 
frontend projesinin build edilmiş olması gerektiğini gradle’a bildirmiş oluyoruz.
Böylece frontend projesinin backend projesinden önce build edileceğini
garanti altına almış oluyoruz.&lt;/p&gt;

&lt;p&gt;Angular projesi build olduğunda ortaya “dist” isimli bir klasör çıkar.
Bu klasör Angular projesindeki tüm dosyaların build + uglify edilmiş halini içerir.&lt;/p&gt;

&lt;p&gt;“build.gradle” dosyasına &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;into(&lt;/code&gt; ile başlayan satırda yaptığımız ilave 
ile “dist” klasörünü Spring Boot uygulamasının ürettiği jar’ın içerisine
JVM’in classpath’inde olacak şekilde eklemiş oluyoruz.
“BOOT-INF/classes” klasörü spring uygulamasının classpath’inin root dizinidir.&lt;/p&gt;

&lt;p&gt;Ayrıca Spring Boot starter sitesinde yine otomatik olarak üretilmiş olan 
main sınıfı da projede uygun klasör yapısını oluşturup projeye eklemeyi ihmal etmeyelim.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Proje ana dizininde çalıştıralım:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; backend/src/main/java/com/serdarkuzucu/springangulardemo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yukarıda oluşturduğumuz klasöre SpringAngularDemoApplication.java isminde
aşağıdaki içerikte bir dosya oluşturalım.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.serdarkuzucu.springangulardemo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringAngularDemoApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringAngularDemoApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Son olarak ana projedeki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;settings.gradle&lt;/code&gt; dosyasına aşağıdaki gibi
backend projesini de eklememiz gerekiyor:&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rootProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'springangulardemo'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;':frontend'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;':backend'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu noktadan sonra &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./gradlew build&lt;/code&gt; komutunu çalıştırdığımızda
hata almamamız gerekiyor.&lt;/p&gt;

&lt;p&gt;Spring uygulamasını ayağa kaldırmak için de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./gradlew bootRun&lt;/code&gt; 
komutunu çalıştırıyoruz. 
Bu komutta da bir hata almamamız gerekiyor.&lt;/p&gt;

&lt;p&gt;İleriki adımlarda test amaçlı kullanılmak üzere projeye 
bir adet örnek REST API ekliyoruz:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.serdarkuzucu.springangulardemo.controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;api/users&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;me&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCurrentUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Serdar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Kuzucu&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;adım-4-spring-bootun-statik-dosya-sunumu-ayarları&quot;&gt;Adım 4: Spring Boot’un Statik Dosya Sunumu Ayarları&lt;/h2&gt;

&lt;p&gt;Angular uygulamasını Spring Boot’un ayağa kalktığı port üzerinde 
sunmaya başlayabilmek için bazı konfigürasyonları yapmak gerekiyor.&lt;/p&gt;

&lt;p&gt;Öncelikle frontend klasörünü bir önceki adımda classpath’e kopyalamıştık.
Angular projesinin “dist” klasörünün içerisinde “frontend” isminde bir klasör
oluşmakta ve biz de o klasörü Spring Boot uygulamasının classpath’ine eklemiş olduk.
Bu sebeple Spring’e ResourceHandler olarak &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;classpath:/frontend/&lt;/code&gt;
dizinini aşağıdaki gibi ekliyoruz.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.serdarkuzucu.springangulardemo.configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.servlet.config.annotation.WebMvcConfigurer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebMvcConfiguration&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebMvcConfigurer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addResourceHandlers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ResourceHandlerRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addResourceHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addResourceLocations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;classpath:/frontend/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu şekilde index.html, main.js, styles.css gibi istekler Spring’e ulaştığında
classpath’deki frontend klasörünün içerisinde o dosyaları araması gerektiğini
söylemiş olmaktayız.&lt;/p&gt;

&lt;p&gt;Yukarıdaki ResourceHandler &lt;a href=&quot;http://localhost:8080/index.html&quot;&gt;http://localhost:8080/index.html&lt;/a&gt; 
şeklinde gelen istekleri yakalayıp frontend/index.html dosyasını sunabiliyor fakat 
&lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt;
şeklinde gelen isteklerde “404 Not Found” hatası dönüyor.&lt;/p&gt;

&lt;p&gt;Uygulamamızın root adresini de index.html dosyasına bağlayabilmek için
aşağıdaki gibi bir &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IndexController&lt;/code&gt; sınıfı yazmamız yeterli.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.serdarkuzucu.springangulardemo.controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IndexController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;forward:index.html&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;adım-5-angular-proxy-ayarları&quot;&gt;Adım 5: Angular Proxy Ayarları&lt;/h2&gt;

&lt;p&gt;Bir geliştirici kendi bilgisayarında projeyi geliştirme amaçlı çalıştığında
Spring Boot jar’ının içerisine gömülmüş Angular projesini çalıştırmamalı.
Geliştiriciler Spring Boot uygulamasını IDE’lerindeki Run Configuration ile main
sınıftan çalıştırmalı veya &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./gradlew bootRun&lt;/code&gt; komutuyla ayağa kaldırmalılar.
Angular uygulamasını ise frontend klasöründe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ng serve&lt;/code&gt; komutunu çalıştırarak
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Angular Live Development Server&lt;/code&gt; üzerinde ayağa kaldırmalılar.&lt;/p&gt;

&lt;p&gt;Bu durumda frontend 4200, backend ise 8080 portlarında ayağa kalkmış oluyor.
Bu da bazı tarayıcılarda ön yüzden backend uygulamasına atılan isteklerin
CORS politikası sebebiyle bloklanmasına sebep oluyor.&lt;/p&gt;

&lt;p&gt;Bu problemi de ortadan kaldırmak için sadece geliştirici (DEV) ortamında çalışan
Angular proxy ayarlarını yapmamız gerekiyor.
Öncelikle ana projemizin altındaki “frontend” klasörünün içerisine 
“proxy.conf.json” isminde bir dosya oluşturuyoruz, dosyanın içeriği şu şekilde:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;/api&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;logLevel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;secure&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu konfigürasyon adresi Angular Live Development Server uygulamasına
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:4200/api&lt;/code&gt; şeklinde gelecek olan tüm istekleri 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt; uygulamasına gönderecek.&lt;/p&gt;

&lt;p&gt;Proxy ayarını “frontend” klasöründeki “angular.json” 
dosyasında da şu şekilde yapıyoruz:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;projects&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;architect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;serve&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;options&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;proxyConfig&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;proxy.conf.json&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Düzenli bir API standardınızın olması ve proxy ayarlarının temiz kalması için
backend tarafındaki tüm REST API’lere burda yaptığımız gibi &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api/**&lt;/code&gt; ön eki ile
veya kendi belirleyeceğiniz başka tek bir ön ek ile başlamanızı tavsiye ederim.
Spring Security konfigürasyonları, custom servlet filtreleri gibi başka işlerde de
oldukça işe yaradığını göreceksiniz ileride.&lt;/p&gt;

&lt;h2 id=&quot;uçtan-uca-testler&quot;&gt;Uçtan Uca Testler&lt;/h2&gt;

&lt;p&gt;Yaptığımız bunca konfigürasyonun çalışıp çalışmadığını uçtan uca test etmek 
için aşağıdaki değişiklikleri yapıyoruz:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.module.ts&lt;/code&gt; dosyasında &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpClientModule&lt;/code&gt; modülünü import edelim:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BrowserModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@angular/platform-browser&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NgModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@angular/core&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppRoutingModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./app-routing.module&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./app.component&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HttpClientModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@angular/common/http&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;NgModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;declarations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;BrowserModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;AppRoutingModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;HttpClientModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- Bu satır&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.module.ts&lt;/code&gt; dosyası ile aynı dizinde bir adet &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user.service.ts&lt;/code&gt; dosyası oluşturalım.
Bu dosyanın içeriği aşağıdaki gibi olsun.
Backend’de açtığımız &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api/users/me&lt;/code&gt; REST API’sini çağırsın.&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Injectable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@angular/core&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@angular/common/http&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;rxjs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Injectable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;providedIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCurrentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;api/users/me&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.component.ts&lt;/code&gt; dosyasını aşağıdaki şekilde değiştirelim.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserService&lt;/code&gt; üzerinden backend’den kullanıcı bilgilerini çeksin.&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@angular/core&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./user.service&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;app-root&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./app.component.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;styleUrls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./app.component.scss&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnInit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;frontend&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;ngOnInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCurrentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.component.html&lt;/code&gt; dosyasında da &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;Welcome&amp;lt;/span&amp;gt;&lt;/code&gt; yazan satırı 
aşağıdaki gibi değiştirelim:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Welcome &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;*ngIf=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;geliştirici-ortamı-testleri&quot;&gt;Geliştirici Ortamı Testleri&lt;/h3&gt;

&lt;p&gt;Spring Boot ve Angular uygulamalarının ikisini de yeniden başlattıktan sonra 
&lt;a href=&quot;http://localhost:4200&quot;&gt;http://localhost:4200&lt;/a&gt; adresini açtığımızda önceden
sadece Welcome yazan yerde artık “Welcome Serdar Kuzucu” yazdığını 
(backend tarafından dönen firstName ve lastName değerleri) görüyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-10-spring-boot-angular-gradle/04-angular-frontend-home.png&quot; target=&quot;_blank&quot;&gt;
  &lt;img border=&quot;0&quot; height=&quot;400&quot; src=&quot;/assets/posts/2021-01-10-spring-boot-angular-gradle/04-angular-frontend-home.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bu şekilde geliştiricilerin frontend ve backend uygulamalarını kendi bilgisayarlarında
ayrı ayrı çalıştırarak iki farklı framework’ün geliştirici ortamı nimetlerinden
faydalanabileceklerini görmüş oluyoruz.&lt;/p&gt;

&lt;h3 id=&quot;production-ortamı-testleri&quot;&gt;Production Ortamı Testleri&lt;/h3&gt;

&lt;p&gt;Production build almak için ana projenin dizininde &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./gradlew build&lt;/code&gt; 
komutunu çalıştırmamız yeterli.&lt;/p&gt;

&lt;p&gt;Gradle dosyalarındaki versiyonlarda bir değişiklik yapmadıysanız build işlemi
sonrasında proje içerisinde şu isimde bir dosya üreyecektir:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;backend/build/libs/backend-0.0.1-SNAPSHOT.jar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Bu dosya Spring Boot uygulamasının son çıktısıdır.
Bu dosyanın içerisinde compile olmuş java sınıflarının yanı sıra
Angular projesinin de production build çıktısı yer almaktadır.&lt;/p&gt;

&lt;p&gt;Bu dosyayı doğrudan &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java -jar&lt;/code&gt; ile aşağıdaki gibi çalıştırabiliriz:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; backend/build/libs/backend-0.0.1-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu şekilde uygulamayı ayağa kaldırdığımızda
&lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt; adresinden
uygulamayı açabiliriz.&lt;/p&gt;

&lt;p&gt;“Geliştirici Ortamı Testleri” başlığında elde ettiğimiz görüntü 
ile aynı görüntüyü elde ediyorsak başarmışız demektir.&lt;/p&gt;

&lt;h2 id=&quot;kaynak-kod&quot;&gt;Kaynak Kod&lt;/h2&gt;

&lt;p&gt;Bu yazıyı yazarken geliştirdiğim örnek uygulamayı Github hesabımdan
siz de inceleyebilirsiniz: 
&lt;a href=&quot;https://github.com/sedran/spring-boot-angular-gradle-example&quot;&gt;sedran/spring-boot-angular-gradle-example&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;sonuç&quot;&gt;Sonuç&lt;/h2&gt;

&lt;p&gt;Son 3 yıl içerisinde bu proje yapısını ekipçe 10’dan fazla projede kullandık.
Build sonrasında üretilen jar dosyasını JVM imajından türetilmiş bir docker imajı 
içerisine koyarak uygulamamızı çok rahat dockerize edebiliyoruz.
Bu sayede bu yapı kubernetes/openshift gibi ortamlarda da sıkıntısız çalışıyor.&lt;/p&gt;

&lt;p&gt;Birbiri ile sürekli iletişim halinde olan frontend 
ve backend uygulamalarının kaynak kodlarının bu şekilde 
bir arada olması bazı uygulamalar ve ekipler için oldukça faydalı. 
Özellikle bir işin frontend tarafı ile backend tarafını 
aynı geliştiricinin geliştirdiği projelerde/ekiplerde 
bu yöntemin daha iyi olduğunu düşünüyorum.&lt;/p&gt;

&lt;p&gt;Bu yöntemle ilgili söyleyebileceğim tek bir negatif düşüncem var,
o da projenin ön yüz kısmı büyüdükçe build sürelerinin aşırı uzaması.&lt;/p&gt;

&lt;p&gt;Ona da ekipçe bir çözüm bulduğumuzda blogumda paylaşıyor olurum.
İnşallah bir gün bulabiliriz.&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Jan 2021 14:04:26 +0000</pubDate>
        <link>https://serdarkuzucu.com/2021/01/10/gradle-spring-boot-angular-birlikte-build-etmek/</link>
        <guid isPermaLink="true">https://serdarkuzucu.com/2021/01/10/gradle-spring-boot-angular-birlikte-build-etmek/</guid>
        
        
        <category>Java</category>
        
        <category>Programlama</category>
        
        <category>Spring Boot</category>
        
        <category>Angular</category>
        
        <category>Gradle</category>
        
      </item>
    
      <item>
        <title>Dağıtık Uygulamada Büyük Veri Okumak</title>
        <description>&lt;p&gt;2020 senesi içerisinde &lt;a href=&quot;https://inomera.com/&quot;&gt;Inomera&lt;/a&gt;‘da Telekom sektörü için geliştirdiğimiz 
devasa bir projeyi başarıyla canlıya aldık.
Oldukça güncel teknolojiler kullandığımız ve mikroservis mimarisi ile
geliştirdiğimiz bu sistem Kubernetes ortamı üzerinde çalışmakta. 
Bu yazıda bu sistemde yaklaşık &lt;u&gt;22 milyon&lt;/u&gt; satır 
kullanıcı verisini veritabanından okuyup dağıtık bir cache Map’ine
dolduran küçük bir mikroserviste uyguladığımız
dağıtık veri okuma yöntemini anlatmaya çalışacağım.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;önbilgi&quot;&gt;Önbilgi&lt;/h3&gt;

&lt;p&gt;Öncelikle kullandığımız araçlardan ve veri yapısından bahsedelim.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Belleğe doldurmaya çalıştığımız veri her bir &lt;a href=&quot;https://tr.wikipedia.org/wiki/MSISDN&quot;&gt;msisdn&lt;/a&gt;, 
yani müşterinin cep telefonu numarası, için müşterinin izin verdiği kategorilerin
ID’lerinden oluşmakta olup Oracle DB üzerinde başka sistemler tarafından 
yönetilen bir view’dan bize sağlanmakta. 
Burada işin içinde çok fazla farklı müşteri sistemi olduğu için daha performanslı
bir veritabanı veya tablo yapısına geçemiyoruz.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Veriyi belleğe çeken uygulamamız kubernetes üzerinde çalışmakta. 
Dinamik olarak kaynak ihtiyacına göre Kubernetes tarafından
instance sayısı arttırılıp azaltılabilmekte bu sebeple herhangi bir
anda uygulamamızdan kaç adet instance’ın eş zamanlı çalışıyor olabileceği
bilgisi elimizde yok. 
Kubernetes API’lerini kullanarak bu bilgiyi elde edebilecek olsak da
uygulamanın içerisinde Kubernetes bağımlılığı oluşturmak istemedik.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dağıtık cache olarak Kubernetes dışında kurulmuş bir &lt;a href=&quot;https://hazelcast.org/&quot;&gt;Hazelcast&lt;/a&gt; cluster’ımız var.
Herhangi bir müşterinin verisine herhangi bir mikroservisten çok hızlı bir şekilde
ulaşabilmek için Hazelcast üzerindeki bir Map’de tutuyoruz.
Hazelcast’in ayrıca bu işte Queue ve Lock özelliklerini de kullandık.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bu boyutta bir veriyi hızlı bir şekilde az bellek kullanarak sorgulayıp, işleyip, Hazelcast’e
doldurmak için uygun bir yol ararken bu yazıda anlatacağım yöntemin 
ihtiyacımızı karşılayacağını öngördük.&lt;/p&gt;

&lt;h3 id=&quot;bellek-kullanımı&quot;&gt;Bellek Kullanımı&lt;/h3&gt;

&lt;p&gt;Bir veritabanına büyük bir veri için sorgu atılacağı zaman düşünülmesi gereken
en önemli şeylerden birisi veritabanından sonuçlar geldiği zaman uygulamanın bellek
tüketiminin nasıl artacağıdır.&lt;/p&gt;

&lt;p&gt;Eğer veriyi işlemeye başlamak için verinin tamamına ihtiyacımız yoksa, 
verileri parça parça alıp, aldıkça işlemeliyiz.&lt;/p&gt;

&lt;p&gt;Bunun için en bilindik yöntemlerden birisi offset/limit sorgusunu offset’i arttırarak tekrar tekrar
atarak sayfalama (pagination) yapmak fakat bu yöntem her seferinde veritabanına yeniden sorgu atmayı
gerektirdiği için faydasından çok zararı oluyor.&lt;/p&gt;

&lt;p&gt;Verileri parça parça çekmek ve işledikçe devamını okumak için Hibernate’deki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scroll&lt;/code&gt; özelliğini kullandık.
Sorgunun envai çeşit hibernate kontrolünden ve transaction yönetiminden geçmemesi için
Hibernate’deki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StatelessSession&lt;/code&gt; sınıfı üzerinden sorgumuzu &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read-only&lt;/code&gt; modda attık.&lt;/p&gt;

&lt;p&gt;Ek olarak bir ORM aracı ile sorgu sonuçlarının otomatik olarak entity sınıfına
çevirilmesi özelliğinden de çok fazla reflection ve nesne kullanımının olmaması için
feragat ediyoruz. Garbage Collector ve CPU biraz rahatlamış oluyor bu sayede.&lt;/p&gt;

&lt;p&gt;Hibernate’de bu şekilde bir sorgu nasıl atılır aşağıda ufak bir örnek paylaşıyorum.
Buradaki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetchSize&lt;/code&gt; parametresi veritabanından sonuçların kaçar kaçar belleğe alınacağını belirliyor.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchMsisdnCategories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;QueryState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetchSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MsisdnCategoriesRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StatelessSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statelessSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openStatelessSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nativeSql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildNativeSql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NativeQuery&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statelessSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createNativeQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nativeSql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFetchSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setReadOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ScrollableResults&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrollableResults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nativeQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scroll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ScrollMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FORWARD_ONLY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scrollableResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawRowData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrollableResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msisdn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawRowData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categoryIds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseCategoryIdsAsByteArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawRowData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* Caller processes the result in `rawRowData` */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MsisdnCategoriesRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msisdn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categoryIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu method içerisinde çektiğimiz her satırı hemen sonuçları işleyecek olan &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Consumer&lt;/code&gt; sınıfına gönderiyoruz.
Böylece herhangi bir şekilde uygulamanın belleğinde aşırı birikme yaratmamış oluyoruz.&lt;/p&gt;

&lt;p&gt;Yukarıdaki methodu çağıran sınıf &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Consumer&lt;/code&gt; arayüzünden oluşturulmuş bir sınıfı parametre olarak gönderiyor.
Yani DAO katmanından çıkacak olan her bir &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MsisdnCategoriesRecord&lt;/code&gt; nesnesinin nasıl işleneceğini DAO katmanına
yazmamış oluyoruz.&lt;/p&gt;

&lt;p&gt;DAO katmanındaki methodumuzu çağıran servis katmanı ise gelen her bir sonucu doğrudan Hazelcast’e atıyor.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MsisdnCategoriesDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msisdnCategoriesDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Hazelcast Map&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msisdnCategoriesMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reloadMsisdnCategories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;QueryState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msisdnCategoriesDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetchMsisdnCategories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetchSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;msisdnCategoriesMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMsisdn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCategoryIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sorgunun-dağıtılması&quot;&gt;Sorgunun Dağıtılması&lt;/h3&gt;

&lt;p&gt;Yukarıdaki kod ile bir uygulama instance’ı tek başına DB’deki tüm datayı çekip Hazelcast Map’ine atabilir değil mi?
Peki birden fazla uygulama instance’ı ayakta olduğu durumda datayı nasıl dağıtıyoruz?&lt;/p&gt;

&lt;p&gt;Açık konuşmam gerekirse çözüm bulmakta en çok zorlandığımız kısım burası oldu.
Bir öğle yemeğinde tartışırken aklımıza gelen şu çözümü beğendik ve o günden beri kullanıyoruz.&lt;/p&gt;

&lt;p&gt;Öncelikle atılacak sorguları modüler aritmetik kullanarak parçalara bölüyoruz.
Cep telefon numarası 905XXXXXXXXX formatında 12 adet rakamdan oluşan bir sayı olduğu için 
modüler aritmetik işlemlerinde msisdn alanını tercih ettik.&lt;/p&gt;

&lt;p&gt;Sorgumuzdaki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; cümleciğinde ise şu şekilde modüler aritmetik koşuluna yer verdik:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*+ parallel(%s) */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MSISDN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;listagg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CATEGORY_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;within&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MSISDN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATEGORY_IDS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VIEW_MSISDN_CATEGORIES&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MSISDN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CATEGORY_ID&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;MOD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSISDN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MSISDN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yukarıdaki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reloadMsisdnCategories&lt;/code&gt; ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetchMsisdnCategories&lt;/code&gt; isimli methodlarda belki dikkatinizi çekmiştir 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QueryState&lt;/code&gt; isminde bir sınıf kullanıyoruz sorguları oluştururken.
Bu sınıf atılacak olan sorgunun hangi modda hangi kalana göre atılacağı bilgisini taşıyor.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QueryState&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remainder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;QueryState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remainder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remainder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remainder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Böylece mikroservisimizin her bir instance’ının belli bir QueryState için 
sorgu atmasını sağlayabilirsek problem çözülmüş olacaktı.&lt;/p&gt;

&lt;p&gt;Peki o anda mikroservisimizden kaç instance ayakta bilgisini bilmeden 
nasıl tüm instance’lara görev dağıtabiliriz? 
Bu noktada zorlandığımız nokta şuydu, instance sayısı kadar mod almaya çalışıyorduk.
Hiçbir instance’ın boş yatmaması için tüm instance’ların işin bir ucundan tutması gerekiyordu.
Çözümü bulduğumuz gün bunun için instance sayısını bilmeye ihtiyacımız olmadığını keşfettik.&lt;/p&gt;

&lt;p&gt;Aşağıdaki diagramda olduğu gibi, tüm DB’yi okuyup veriyi belleğe yükleme görevini alan mikroservis,
belirli bir mod değerine karar verip, bir hazelcast queue’suna mod sayısı kadar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QueryState&lt;/code&gt; nesnesini
farklı kalan değerleri ile dolduruyor. Tüm mikroservis instance’ları hali hazırda açık duran 
birer Thread ile bu belirli Queue’dan gelecek olan mesajları dinlemekteler. 
Her instance Queue’dan kendine düşen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QueryState&lt;/code&gt; nesnesindeki mod ve kalan bilgisine göre sorgusunu atıyor
ve veritabanından gelen sonuçları Hazelcast Map’ine dolduruyor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/queue-mod-query.png&quot; alt=&quot;hazelcast queue modular_query&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Burada queue’ya attığımız &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QueryState&lt;/code&gt; nesnelerinin sayısı (ya da mod değerimiz) instance sayısına tam bölünmüyorsa 
bazı instance’lar diğerlerinden daha fazla sorgu atabilirler veritabanına. 
Eğer mod değerimiz instance sayısından küçük ise bazı instance’larımız hiç sorgu atmayabilirler.
Biz mikroservisin instance sayısının alabileceği maksimum değer civarında 
bir sayıyı mod değeri olarak kullanıyoruz 
ve bu değeri runtime’da değiştirebileceğimiz konfigüratif bir yapıda tutuyoruz.&lt;/p&gt;

&lt;h3 id=&quot;ufak-i̇yileştirmeler&quot;&gt;Ufak İyileştirmeler&lt;/h3&gt;

&lt;p&gt;Tüm mikroservislerin işi belli ölçülerde paylaşıp üzerlerine düşen görevi yaptıklarından emin olduktan sonra
artık her bir mikroservisin elindeki işi yaparken daha performanslı çalışması için ne yapabiliriz bunu düşünmenin
zamanı geldi.&lt;/p&gt;

&lt;p&gt;Bu tip uygulamalarda en büyük zaman kaybı genellikle IO (network veya disk) kaynaklı olur.
Veritabanından veriyi okuma kısmındaki git-gel işlemlerini sorguları scroll özelliğiyle atarak oldukça azalttık.
Geriye hazelcast’e verileri gönderdiğimiz yer kalıyor. Hazelcast aracını da uygulamadan ayrı bir cluster şeklinde
kurduğumuz için hazelcast operasyonları da network işlemlerinin büyük çoğunluğunu oluşturmakta.&lt;/p&gt;

&lt;p&gt;DAO katmanından gelen her bir satır için hazelcast’e bir &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.put&lt;/code&gt; işlemi çağırmak yerine öncelikle
gelen satırları küçük gruplar halinde (1000 adet gibi) toparlayıp sonrasında &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.putAll&lt;/code&gt; methodunu çağırarak
tek seferde network’e çıkarak küçük bir iyileştirme sağlayabildik. Burada önemli nokta elimizdeki verinin
karakteristiğine göre memory üzerinde fazla birikme oluşturmayacak doğru sayıyı seçmek.&lt;/p&gt;

&lt;p&gt;Sonraki aşamada hazelcast dökümantasyonlarını karıştırırken bildiğimiz java Map’lerinde olmayan 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.set&lt;/code&gt; ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.setAll&lt;/code&gt; isimli methodlarının Hazelcast’in IMap arayüzünde bulunduğunu fark ettik.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;put*&lt;/code&gt; türevi methodlar veriyi hazelcast’e koyduktan sonra Map’de ilgili key’e ait varolan eski veriyi dönerken
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set*&lt;/code&gt; türevi methodlar herhangi bir şey dönmüyorlar. 
Bu methodları kullandığımız durumda network katmanını kullanmayacağımız bir veri için boşuna meşgul etmemiş oluyoruz.&lt;/p&gt;

&lt;h1 id=&quot;sonuç&quot;&gt;Sonuç&lt;/h1&gt;

&lt;p&gt;Bu yazıda anlattığım yöntemleri kullanarak tek bir instance’da çalışan, 
tüm veriyi veritabanından hazelcast’e doldurması bir saati bulan bir görevi
10 dakikanın altında çalışır hale getirdik. Sorgu attığımız veritabanı yapısında
değişiklik yapma şansımız olsaydı daha iyi süreler de elde edebilirdik 
fakat o yapıyı bizden başka birçok farklı sistem kullandığından öyle bir şansımız malesef bulunmamakta.&lt;/p&gt;

&lt;p&gt;Özetlemek gerekirse bu tip bir görev için kullanmaktan çok keyif aldığım şu teknikleri uyguladık:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Modüler aritmetik kullanarak sorguları dağıtma&lt;/li&gt;
  &lt;li&gt;Bilinen ORM yapısından çıkıp daha native tarafa yakın sorgular kullanmak&lt;/li&gt;
  &lt;li&gt;Veritabanı sorgusunun sonuçlarını scroll ederek okumak&lt;/li&gt;
  &lt;li&gt;Aynı uygulamanın birbirini görmeyen/bilmeyen instance’ları arasında görev dağılımı&lt;/li&gt;
  &lt;li&gt;Verinin bellekte minimum yer kaplayacak formatta tutulması&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bu yöntemlerin bu yazıda gösterdiklerimden çok fazla sayıda farklı implementasyonları vardır
fakat büyük işlerde önemli olan yöntemlerdir. Araçlar değişir.&lt;/p&gt;

&lt;p&gt;Bu yazı 2020 Ağustos ayında başladığım fakat bir türlü vakit ayırıp bitiremediğim bir yazıydı.
Anlatımda kopukluklar varsa sebebi budur, hatalarım olduysa affola.&lt;/p&gt;
</description>
        <pubDate>Fri, 08 Jan 2021 22:48:20 +0000</pubDate>
        <link>https://serdarkuzucu.com/2021/01/09/dagitik-uygulamada-buyuk-veri-okumak/</link>
        <guid isPermaLink="true">https://serdarkuzucu.com/2021/01/09/dagitik-uygulamada-buyuk-veri-okumak/</guid>
        
        
        <category>Java</category>
        
        <category>Programlama</category>
        
      </item>
    
      <item>
        <title>Daha Tatlı Bir Git Log</title>
        <description>&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt;, Git versiyon kontrol sisteminde oluşturulmuş
commit geçmişini tarihsel olarak sondan başa doğru sırasıyla
konsola yazan bir &lt;strong&gt;Git&lt;/strong&gt; komutudur. 
Tek başına kullanıldığında oldukça sıkıcı bir görünüme sahip olan
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; komutunu birkaç parametre ile daha tatlı bir hale getirebiliyoruz.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;varsayılan-git-log&quot;&gt;Varsayılan Git Log&lt;/h2&gt;

&lt;p&gt;En basit hali ile 
&lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;spring-boot&lt;/a&gt; 
projesinde &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; komutunu çalıştırdığımızda
aşağıdaki gibi bir görüntü ile karşılaşırız.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/better-git-log-1.png&quot; alt=&quot;Normal Git Log&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tek-satır-git-log&quot;&gt;Tek Satır Git Log&lt;/h2&gt;

&lt;p&gt;Yukarıdaki şekilde olduğu gibi uzun uzun açıklamaları okumak istemiyorsak,
sadece commit başlıklarını listelemek istiyorsak, 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--oneline&lt;/code&gt; parametresini kullanabiliriz.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --oneline&lt;/code&gt; komutunu çalıştırdığımızda 
aşağıdaki çıktıyı elde ederiz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/better-git-log-2.png&quot; alt=&quot;Git Log --oneline&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;graph-şeklinde&quot;&gt;Graph Şeklinde&lt;/h2&gt;

&lt;p&gt;Graph şeklinde çıktı almak için &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--graph&lt;/code&gt; parametresini kullanabiliriz.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --graph&lt;/code&gt; komutunu çalıştırdığımızda aşağıdaki çıktıyı elde ederiz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/better-git-log-3.png&quot; alt=&quot;Git Log --graph&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bu şekilde ağaç yapısında hangi commit hangi branch’de oluşturulmuş,
hangi branch hangi branch’e birleştirilmiş rahatça görebiliriz.&lt;/p&gt;

&lt;p&gt;Eğer commit mesajlarının sadece başlık kısımları görünsün isterseniz
bu komutta da &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--oneline&lt;/code&gt; parametresini kullanabilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --graph --oneline&lt;/code&gt; komutunu kullanarak aşağıdaki
görüntüyü elde edebiliriz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/better-git-log-4.png&quot; alt=&quot;Git Log --graph --oneline&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;formatlama&quot;&gt;Formatlama&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; komutuna &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--pretty=format:&amp;lt;string&amp;gt;&lt;/code&gt; parametresini geçerek
kendi istediğimiz bilgiyi istediğimiz şekilde yazmasını sağlayabiliyoruz.&lt;/p&gt;

&lt;p&gt;Bu sayede istersek tek bir satırda veya birden fazla satırda 
commit’in id’sini, 
commit’i işaret eden tag ve branch’leri,
commit yazarını (author),
commitin oluşturulduğu tarihi,
commit mesajının başlığını veya tamamını
ve daha birçok alanını çıktı alabiliriz.&lt;/p&gt;

&lt;p&gt;Formatı girerken tırnak içerisinde belli başlı bazı parametreleri kullanabiliyoruz.&lt;/p&gt;

&lt;p&gt;Aşağıdaki örneğin üzerinden inceleyelim:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log &lt;span class=&quot;nt&quot;&gt;--pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;format:&lt;span class=&quot;s2&quot;&gt;&quot;%h -%d %s (%ar) &amp;lt;%an&amp;gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu komuttaki formatın içerisinde bulunan parametreler:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%h&lt;/code&gt;  : Commit ID’sinin 10 karakter uzunluğundaki kısa hali&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%d&lt;/code&gt;  : Commit’e işaret eden branch veya tag’lerin parantez içerisinde virgülle ayrılmış listesi&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%s&lt;/code&gt;  : Commit mesajının başlık satırı (subject)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%ar&lt;/code&gt; : Commit tarihinin şimdiki zamana göre göreceli formatı. Örneğin “3 gün önce”, “5 dakika önce”, vb.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%an&lt;/code&gt; : Commit’i oluşturan kişinin (author) ismi&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bu komutun çıktısı aşağıdaki gibi olacaktır:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/better-git-log-5.png&quot; alt=&quot;Git Log pretty format&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Daha fazla parametreye hakim olmak isteyenlerin 
&lt;a href=&quot;https://git-scm.com/docs/git-log&quot;&gt;Git Log&lt;/a&gt; dökümantasyonunun
&lt;a href=&quot;https://git-scm.com/docs/git-log#_pretty_formats&quot;&gt;PRETTY FORMATS&lt;/a&gt;
başlığını incelemelerini tavsiye ederim.&lt;/p&gt;

&lt;p&gt;Ben “3 gün önce” gibi göreceli tarihleri sevmediğim için
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%cd&lt;/code&gt; format parametresini kullanıyorum.
Bu parametre ek olarak &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--date=format:&amp;lt;string&amp;gt;&lt;/code&gt; parametresini
kullanabilmeme olanak tanıyor.
Böylece istediğim formatta tarih çıktısı da alabiliyorum.&lt;/p&gt;

&lt;p&gt;Aşağıdaki komut tarih formatını istediğimiz gibi ayarlayabilmemizi sağlıyor.
Yukarıdaki komuttan tek farkı tarihin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2020-04-25 13:32:43&lt;/code&gt; şeklinde çıkması.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log &lt;span class=&quot;nt&quot;&gt;--pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;format:&lt;span class=&quot;s2&quot;&gt;&quot;%h -%d %s (%cd) &amp;lt;%an&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;format:&lt;span class=&quot;s1&quot;&gt;'%Y-%m-%d %H:%M:%S'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;renklendirme&quot;&gt;Renklendirme&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--pretty=format:&amp;lt;string&amp;gt;&lt;/code&gt; parametresi ile formatladığımız log
tek renk olarak çıktı vereceğinden okuması biraz zor olacaktır.&lt;/p&gt;

&lt;p&gt;Eğer istersek formatın herhangi bir alanını 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%C(&amp;lt;color&amp;gt;)&lt;/code&gt; ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%C(reset)&lt;/code&gt; arasına alarak renklendirebiliriz.&lt;/p&gt;

&lt;p&gt;Bazı durumlarda renklendirme git ayarlarında devre dışı bırakılmış olabiliyor.
Bu sebeple komuta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--color&lt;/code&gt; parametresini de ekleyelim.&lt;/p&gt;

&lt;p&gt;Yukarıdaki son örnekte verdiğim komutta
commit id kırmızı,
branch ve tag isimleri sarı,
tarih yeşil,
author koyu mavi olsun istiyorsak 
aşağıdaki gibi parametrelerin etrafını renklerle sarabiliriz.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--color&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;format:&lt;span class=&quot;s2&quot;&gt;&quot;%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%cd)%C(reset) %C(bold blue)&amp;lt;%an&amp;gt;%C(reset)&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;format:&lt;span class=&quot;s1&quot;&gt;'%Y-%m-%d %H:%M:%S'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu komutun çıktısı aşağıdaki gibi olacaktır:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/better-git-log-6.png&quot; alt=&quot;Git Log pretty format renkli&quot; width=&quot;800px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;renkli-formatlı-graph-olarak&quot;&gt;Renkli, Formatlı, Graph Olarak&lt;/h2&gt;

&lt;p&gt;Yukarıdaki renklendirme başlığında verdiğim örnek komutun sonuna
bir de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--graph&lt;/code&gt; parametresini eklersek eğer,
hem istediğimiz formatta ve renklendirme ile hem de graph halinde
versiyon geçmişimizi görüntülemiş oluruz.&lt;/p&gt;

&lt;p&gt;Son iyileştirmeyi de yaptığımız durumda komutumuz şu hale gelir:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--color&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;format:&lt;span class=&quot;s2&quot;&gt;&quot;%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%cd)%C(reset) %C(bold blue)&amp;lt;%an&amp;gt;%C(reset)&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;format:&lt;span class=&quot;s1&quot;&gt;'%Y-%m-%d %H:%M:%S'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--graph&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu komutu çalıştırdığımızda çıktı aşağıdaki gibi olacaktır:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/better-git-log-7.png&quot; alt=&quot;Git Log pretty format renkli graph&quot; width=&quot;800px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;alias-tanımlama&quot;&gt;Alias Tanımlama&lt;/h2&gt;

&lt;p&gt;Yukarıda başlıktan başlığa eklemeler yapıp uzattığımız bu komutu 
her seferinde tekrar elle yazmayacağız veya kopyala yapıştır yapmayacağız.&lt;/p&gt;

&lt;p&gt;Bu komutu git’in alias özelliğini kullanarak bir kısayola atayacağız.&lt;/p&gt;

&lt;p&gt;Terminalde &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git lg&lt;/code&gt; yazdığımızda yukarıdaki uzun komutun çalışmasını sağlayacağız.&lt;/p&gt;

&lt;p&gt;Aşağıdaki komutu çalıştırdığınız anda git’in global konfigürasyonunda
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lg&lt;/code&gt; isminde bir alias tanımlanmış oldu.
Böylece &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git lg&lt;/code&gt; yazdığımız zaman artık o meşhur uzun komutumuz çalışacak.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  alias.lg &lt;span class=&quot;s2&quot;&gt;&quot;log --color --graph --pretty=format:'%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%cd)%C(reset) %C(bold blue)&amp;lt;%an&amp;gt;%C(reset)' --date=format:'%Y-%m-%d %H:%M:%S'&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;kapanış&quot;&gt;Kapanış&lt;/h2&gt;

&lt;p&gt;Bu komutu ilk olarak epey vakit önce 
&lt;a href=&quot;https://coderwall.com/p/euwpig/a-better-git-log&quot;&gt;A better git log&lt;/a&gt;
isimli yazıda görmüştüm.
Birkaç yıldır bu yazıda gösterilen alias’ı ben de kullanıyorum ve bağımlılık oldu artık.
Ekibimde işe başlayan her yeni genç yazılımcı arkadaşıma mutlaka bu alias’ı tanımlattırıyorum.&lt;/p&gt;

&lt;p&gt;Sizin kendi geliştirici ortamlarınızda kullandığınız benzer formatlar varsa
bu yazının altında yorum olarak paylaşabilirsiniz.&lt;/p&gt;

&lt;h2 id=&quot;kaynaklar&quot;&gt;Kaynaklar&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/docs/git-log&quot;&gt;https://git-scm.com/docs/git-log&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coderwall.com/p/euwpig/a-better-git-log&quot;&gt;https://coderwall.com/p/euwpig/a-better-git-log&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.atlassian.com/git/tutorials/git-log&quot;&gt;https://www.atlassian.com/git/tutorials/git-log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 26 Apr 2020 02:40:00 +0000</pubDate>
        <link>https://serdarkuzucu.com/2020/04/26/daha-tatli-bir-git-log/</link>
        <guid isPermaLink="true">https://serdarkuzucu.com/2020/04/26/daha-tatli-bir-git-log/</guid>
        
        
        <category>Git</category>
        
      </item>
    
      <item>
        <title>Git Commit Mesajı Nasıl Yazılmalı</title>
        <description>&lt;p&gt;Kaynak kodda yaptığımız bir değişikliği versiyon kontrol sistemine kaydederken yapmamız gereken en önemli
maddelerden bir tanesi bu değişikliği iyi yazılmış bir mesaj ile açıklamaktır. Peki iyi bir commit mesajını
diğerlerinden ayıran özellikler nelerdir? Bu yazıda dünya genelinde kabul görmüş bazı standartları göreceğiz.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Öncelikle iyi yazılmış bir commit mesajı daha sonra ne işimize yarar? Güzel bir alıntı ile başlamak istiyorum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Any software project is a collaborative project. It has at least two developers, the original developer and the
original developer a few weeks or months later when the train of thought has long left the station. This later self
needs to reestablish the context of a particular piece of code each time a new bug occurs or a new feature needs to 
be implemented.&lt;/p&gt;

  &lt;p&gt;Peter Hutterer - &lt;a href=&quot;http://who-t.blogspot.com/2009/12/on-commit-messages.html&quot;&gt;On commit messages&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Özetle iyi yazılmış bir commit mesajı;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Kodda yapılan bir değişikliğin üzerinden zaman geçtikten sonra 
bu değişikliğin sebebini kodu okuyarak anlamaya çalışmak 
oldukça zaman alan bir eylemdir.
İyi bir commit mesajı kodu tekrar okumadan değişikliğin neden yapıldığını bize söyler.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Projenin versiyon geçmişinin düzenli ve tutarlı görünmesini sağlar.
Hangi özellik ne zaman geliştirildi, 
bir hata hangi commit ile düzeltildi 
veya ilgili release hangi değişiklikleri içeriyor
gibi kıymetli bilgilere versiyon geçmişinde sadece commit mesajlarını okuyarak ulaşabiliriz.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Yazılan kodu asıl branch’e merge etmeden önce gözden geçiren kişilere yardımcı olur.
Code-review sürecini hızlandırır.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Son olarak bu benim kişisel yorumum, 
iyi yazılmış bir commit mesajı bir yazılımcının işini özenerek yaptığını gösterir.
Yaptığı değişiklikleri commit mesajında güzelce açıklamayan bir geliştiriciye bir gün
“Bu satırı niçin bu şekilde değiştirdin?” diye sormamız gerekebilir 
ve muhtemelen sebebini o da unutmuş olacaktır. 
Bu sefer hatırlamak için onun kodu açıp okuması gerekecektir.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Çeşitli kaynaklardan toparladığım kuralları birer birer açıklamadan önce
iyi bir commit mesajı bulup örnek olarak panoya asmanın güzel olacağını düşünüyorum.&lt;/p&gt;

&lt;p&gt;Aşağıda spring-boot projesinin github repository’sinden aldığım 
&lt;a href=&quot;https://github.com/spring-projects/spring-boot/commit/70d4994502c848b3db82845c97a033448356c938&quot;&gt;bir commit&lt;/a&gt; 
mesajını göstermek istiyorum. 
Bu commit’i gönderen &lt;a href=&quot;https://github.com/scottfrederick&quot;&gt;Scott Frederick&lt;/a&gt; abimiz 
aşağıda yazacağım bütün iyi commit mesajı yazma kurallarını, adeta ibret-i alem için, uygulamış.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Disable exception details on default error views

Prior to this commit, default error responses included the message
from a handled exception. When the exception was a BindException, the
error responses could also include an errors attribute containing the
details of the binding failure. These details could leak information
about the application.

This commit removes the exception message and binding errors detail
from error responses by default, and introduces a
`server.error.include-details` property that can be used to cause
these details to be included in the response.

Fixes gh-20505
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Kötü yazılmış mesajlara da örnekler vermeyi düşündüm 
fakat iyi yazılmış mesajlar o kadar nadir projelerde bulunuyor ki
rastgele açtığım projelerin çoğunda kötü örnekler mevcut.
Kötü örnekleri çok iyi bildiğiniz için burayı hiç kirletmeyeceğim.&lt;/p&gt;

&lt;h2 id=&quot;kurallar&quot;&gt;Kurallar&lt;/h2&gt;

&lt;p&gt;Artık kuralları incelemeye başlayabiliriz.
İyi bir commit mesajının kuralları:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#bos-satir&quot;&gt;Başlık ve gövdeyi boş bir satır ile birbirinden ayırın&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#baslik-50-karakter&quot;&gt;Başlığı 50 karakter ile sınırlandırın&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#baslik-buyuk-harf&quot;&gt;Başlığa büyük harf ile başlayın&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#baslik-nokta&quot;&gt;Başlık satırını nokta ile sonlandırmayın&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#baslik-emir-kipi&quot;&gt;Başlığı emir kipi ile yazın&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#govde-72-karakter&quot;&gt;Gövde satırlarında 72 karakter uzunluğunu geçmeyin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#govde-ne-neden&quot;&gt;Gövdede neyi niçin değiştirdiğinizi açıklayın&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;bos-satir&quot;&gt;Başlık ve gövdeyi boş bir satır ile birbirinden ayırın&lt;/h3&gt;

&lt;p&gt;Git versiyon kontrol sistemi yazdığınız mesajı başlık ve gövde olmak üzere iki parça olarak düşünür.
Versiyon geçmişi üzerinde çalışan birçok git komutu bu ayrımı kullanır. 
Örneğin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; komutu tüm commit’lerin mesajlarını tam haliyle listelerken,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git shortlog&lt;/code&gt; ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --oneline&lt;/code&gt; komutları commit’lerin sadece başlıklarını listeler.&lt;/p&gt;

&lt;p&gt;Git’in bu ayrımı yapabilmesinin tek yolu başlık olarak yazdığınız satır ile
gövde olarak yazdığınız ilk satırın arasında bir boş satır bulunmasıdır.
Boş satır bulunmadığı takdirde Git iki satırı birleştirir ve tek satır gibi düşünür.&lt;/p&gt;

&lt;h3 id=&quot;baslik-50-karakter&quot;&gt;Başlığı 50 karakter ile sınırlandırın&lt;/h3&gt;

&lt;p&gt;Commit mesajını kısa tutmak okunabilirliğini arttıracaktır.
Aynı zamanda sizi yaptığınız değişiklikleri kısaca özetlemeye zorlayacağı için
yaptığınız değişiklikleri bir kez daha düşünmenizi sağlayacaktır.&lt;/p&gt;

&lt;p&gt;Eğer yaptığınız değişiklikleri özetleme konusunda zorluk yaşıyorsanız
gerekenden fazla değişikliği tek bir commit’e yüklemeye çalışıyor olabilirsiniz.
Bu durumda yaptığınız değişiklikleri birden fazla commit’e paylaştırmayı düşünebilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --help&lt;/code&gt; komutunu kullanarak &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; hakkında yardım istediğimizde
terminalimize dökülen uzun yazıda aşağıdaki gibi bir bölüm var:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Though not required, it's a good idea to begin the commit message with a single short 
(less than 50 character) line summarizing the change, followed by a blank line and then 
a more thorough description. The text up to the first blank line in a commit message is 
treated as the commit title, and that title is used throughout Git. For example, 
git-format-patch(1) turns a commit into email, and it uses the title on the Subject 
line and the rest of the commit in the body.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yani git de başlık satırının 50 karakterden kısa olmasının iyi olacağını söylüyor.&lt;/p&gt;

&lt;h3 id=&quot;baslik-buyuk-harf&quot;&gt;Başlığa büyük harf ile başlayın&lt;/h3&gt;

&lt;p&gt;Adından anlaşılacağı gibi ilk satırımız commit mesajımızın başlığı görevi görecek.
Tüm başlıklar gibi bu başlığımıza da büyük harf ile başlayalım.&lt;/p&gt;

&lt;h3 id=&quot;baslik-nokta&quot;&gt;Başlık satırını nokta ile sonlandırmayın&lt;/h3&gt;

&lt;p&gt;Nihayetinde commit mesajının başlığı da bir başlıktır 
ve başlıklar nokta ile bitmemeli.&lt;/p&gt;

&lt;p&gt;Ek olarak başlık satırına koyacağınız her bir karakter
kendimize koyduğumuz 50 karakter başlık kotasından tüketmekte.&lt;/p&gt;

&lt;h3 id=&quot;baslik-emir-kipi&quot;&gt;Başlığı emir kipi ile yazın&lt;/h3&gt;

&lt;p&gt;Git kendisi de commit mesajı üretirken emir kipi (Imperative) kullanmakta.&lt;/p&gt;

&lt;p&gt;Örneğin otomatik olarak merge commit oluşturken:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Merge branch 'release/awesome-feature'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu durumda emir kipi ile yazmanın birinci faydası 
git ile aynı kuralları kullanmış oluyoruz.
Bu da versiyon geçmişimizde tutarlılık sağlıyor.&lt;/p&gt;

&lt;p&gt;Git’in kendi repository’sinde de aşağıdaki gibi emir kipi ile yazılmasını istemişler.
Sanki koda davranışını değiştirmesi için emir veriyormuş gibi yazın diyorlar.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Describe your changes in imperative mood, e.g. “make xyzzy do frotz”
  instead of “[This patch] makes xyzzy do frotz” or “[I] changed xyzzy
  to do frotz”, as if you are giving orders to the codebase to change
  its behavior.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://git.kernel.org/pub/scm/git/git.git/tree/Documentation/SubmittingPatches?id=HEAD#n133&quot;&gt;Git Docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bir diğer faydası da emir kipi ile yazdığımızda özne kullanmayacağımız 
ve fiillere -ed veya -s gibi ekler gelmeyeceği için mesajımızın kısalması.
Böylece başlık satırımızda 50 karakter limiti kuralımızı delmeden daha fazla bilgi verebileceğiz.&lt;/p&gt;

&lt;h5 id=&quot;yanlış&quot;&gt;Yanlış&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fixes NullPointerException in SubscriptionRestController&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fixed NullPointerException in SubscriptionRestController&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I added direct charging capability for internal partners&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;This commit adds direct charging capability for internal partners&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;doğru&quot;&gt;Doğru&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fix NullPointerException in SubscriptionRestController&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add direct charging capability for internal partners&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;govde-72-karakter&quot;&gt;Gövde satırlarında 72 karakter uzunluğunu geçmeyin&lt;/h3&gt;

&lt;p&gt;Kod yazarken de kitap yazarken de okunabilirliğin artması için
bir satıra yazılabilcek maksimum karakter sayısı kısıtlanır.
Çok kısa satırlar sürekli satır atlamak zorunda kalacağımız için okumayı zorlaştırır.
Çok uzun satırlar ise okuyanın alt satıra geçeceği zaman satırın başını kaçırmasına sebep olur.&lt;/p&gt;

&lt;p&gt;Bilgisayar dünyasında geçmişin teknolojik kısıtlamalarının günümüze bıraktığı bir armağan olan
80 karakter limiti bir çok alanda hala kullanılmakta. 
Bu 80 karakter limitinin nereden geldiği ile ilgili çok güzel bir stackexchange yazısı buldum
linki şuraya bırakıyorum boş vaktiniz olur ve merak ederseniz buyrun:
&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/148677/why-is-80-characters-the-standard-limit-for-code-width&quot;&gt;Why is 80 characters the ‘standard’ limit for code width?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Peki neden 72 karakter? Çünkü bazı git komutlarında commit mesajlarımıza indentation uygulanır.
Bu indentation 72 karakter olarak yazdığımız satırlarımıza bir miktar boşluk ekler
ve mesajlarımız ekranda yazdığımızdan daha fazla yer kaplar.&lt;/p&gt;

&lt;p&gt;Kendimizi 72 karakter ile kısıtladığımızda oluşan çıktı hala 80 karakter limitini aşmamış olur.
80 karakterlik bir terminalde yatay scrollbar’ın görünmesine 
veya yazdığımız satırın terminal tarafından wrap edilmesine sebep olmamış oluruz.&lt;/p&gt;

&lt;h3 id=&quot;govde-ne-neden&quot;&gt;Gövdede neyi neden değiştirdiğinizi açıklayın&lt;/h3&gt;

&lt;p&gt;Commit mesajımızın gövde kısmında, kodda ne değişiklik yaptığımızı
ve bu değişikliği neden yaptığımızı görmek isteriz.
Değişikliğin nasıl yapıldığı veya kodun nasıl çalıştığını merak edenler kodu okumalı.
Commit mesajında “nasıl” sorusuna cevap aramamalıyız.&lt;/p&gt;

&lt;p&gt;Kaliteli bir kod kendisini açıklayabilmelidir.
Eğer açıklayamayacak kadar kompleks bir kodsa, koda yorum yazılmalı.&lt;/p&gt;

&lt;p&gt;Koda bakarak anlayamayacağımız şey, bağlamıdır (context). 
Yani bu kod neden yazıldı?
Hangi bug çözülmeye çalışılırken bu satır değiştirildi?
Bu methodun içine bu koşul hangi özellik geliştirilirken eklendi?
İyi bir commit mesajının bunlar gibi sorulara cevap vermesini bekleriz.&lt;/p&gt;

&lt;p&gt;Beğendiğim bir diğer mesaj içeriği de yazının başlarında verdiğim örnekteki gibi,
“Bu değişiklikten önce kodun davranışı şu şekildeydi,
bu commit sonrasında artık kodun davranışı bu şekilde olacaktır.”
şeklinde anlatmaktır. 
Gördüğüm kadarıyla Spring Boot projesi geliştiricileri bu kuralı uyguluyorlar.&lt;/p&gt;

&lt;p&gt;Gövdede değinilebilecek bir diğer konu ise ilgili commit sonrası nelerin eksik kaldığıdır.
Bu commit ile geliştirilecek özelliğin ne kadarı geliştirildi, ne kadarı başka commit’lere adreslendi?
Bu bilginin de commit mesajında çok kıymetli bir veri olacağını düşünüyorum.&lt;/p&gt;

&lt;h2 id=&quot;öneriler&quot;&gt;Öneriler&lt;/h2&gt;

&lt;p&gt;Bu kısımda herkesin kabul ettiği genel geçer kuralların dışında kalan kendi görüşlerime
veya fikir ayrılıklarının olduğu konularda savunduğum görüşe yer vereceğim.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#ingilizce-yazin&quot;&gt;İngilizce yazın&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#proje-yonetim-id&quot;&gt;Proje yönetim aracı ID’lerini sona ekleyin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pair-programming&quot;&gt;Pair programming yaptığınız kişileri de mesaja dahil edin&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ingilizce-yazin&quot;&gt;İngilizce yazın&lt;/h3&gt;

&lt;p&gt;Bu madde ile ilgili yazılmış bir şey pek bulamadım o yüzden kendi görüşüm olduğunu belirteyim.
Artık herkes her yerde.
Şu anda çalıştığınız projedeki tüm ekibin Türk olması her zaman böyle kalacağını göstermiyor.
Her an yabancı bir iş arkadaşınız olabilir,
yurt dışından danışmanlık alabilir,
veya projeyi silikon vadisindeki bir firmaya satabilirsiniz.
Daha da güzeli açık kaynak kodlu deyip kaynak kodunuzu dünyanın dört bir yanındaki geliştiricilere açabilirsiniz.&lt;/p&gt;

&lt;p&gt;Birçok sektörde olduğu gibi yazılım sektöründe de iletişim dili olarak İngilizce kullanılıyor.
Nasıl ki kodumuzdaki değişkenleri, fonksiyonları, sınıfları, vs Türkçe isimlendirmiyorsak 
(ki aksini savunanlar da yapanlar da var)
versiyon geçmişini de Türkçe tutmamalıyız.&lt;/p&gt;

&lt;p&gt;Bu 3-4 sene önce benim de yaptığım bir hataydı.
Şimdi versiyon geçmişinde eskiden Türkçe yazdığım mesajları gördükçe sinirleniyorum.
En kötüsü de üzerine epey commit geldikten sonra o mesajları düzeltememek. :)&lt;/p&gt;

&lt;h3 id=&quot;proje-yonetim-id&quot;&gt;Proje yönetim aracı ID’lerini Sona Ekleyin&lt;/h3&gt;

&lt;p&gt;Eğer bir proje yönetim aracı, issue tracker, vs kullanıyorsanuz, 
commit mesajının en sonunda, gövde bittikten sonra yine bir satır boşluk bırakıp,
proje yönetim sistemi ID’mizi yazabiliriz.&lt;/p&gt;

&lt;p&gt;Bu şekilde kullandığımız farklı tool’ların birbirinden haberinin olmasını sağlayabiliriz.
Daha ileriki zamanlarda commit mesajını inceleyen arkadaşlara 
bu iş ile ilgili daha fazla detayın bulunduğu bir kaynak daha sunmuş oluruz.&lt;/p&gt;

&lt;p&gt;Örneğin yazının başında örnek verdiğim commit mesajındaki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fixes gh-20505&lt;/code&gt; yazan satırda
Github’daki issue ID’sinin referans verildiğini görebiliriz.&lt;/p&gt;

&lt;p&gt;Bunu yaparken dikkat edilmesi gereken husus bu issue id’nin commit mesajının
başlığında değil gövdesinde yer almasıdır.&lt;/p&gt;

&lt;p&gt;Bunu başlığın başına koyanları gördüm. 
Sonuna koyanları gördüm.
Başlık satırına issue id dışında başka hiçbir şey yazmayanlar olduğunu gördüm.
Başlığın hem başına hem sonuna koyanını bile gördü bu gözler hey gidi.
Bu konuda çok hassasım çünkü çalıştığım ekipte buna direnen gençler var :)&lt;/p&gt;

&lt;p&gt;Commit mesajının en sonlarında bir satırda issue id aşağıdakilere benzer bir formatta kullanılabilir:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Fixes: FCB-8473
Resolves: FCB-3123
Issue: TEAM-432
Ticket: TKT-83823242
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ayrıca issue id yazıyorum nasıl olsa gidip ordan okusunlar diyip de 
commit mesajını açıklayıcı yazmamak çok ayıptır.
Issue tracking sisteminiz o anda hizmet veremiyor olabilir, 
projede çalışan geliştiricilerden birisinin o anda o sisteme erişimi olmayabilir,
veya bizim gibi ara sıra proje yönetim programınızı değiştirebilirsiniz.
Bu sebeple issue id versek dahi commit mesajında yeteri kadar detayı paylaştığımızdan emin olmalıyız.&lt;/p&gt;

&lt;p&gt;Issue id eğer commit mesajı başlığında olursa ilgili özellik ile ilgili
tüm commit mesajlarında aşağıdaki gibi aynı issue id kendini tekrar eder
ve görüntü kirliliğine yol açar:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;--oneline&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;cb5515d21 Merge branch 'fea/FCB-1126-customer-history-report' into 'release/024-port-out-customer-information'
b5d572d32 FCB-1126 Fix test
c7c80cda3 FCB-1126 Change msisdn-history pojo class
ab68a1d7c FCB-1126 Add customer-history page
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Başlık satırımızdaki 50 karakterlik alan oldukça kıymetli bir alan olduğu için 
issue id yazarak boşa karakter harcamak israf olmaz mı?&lt;/p&gt;

&lt;p&gt;Issue ID’ler branch isimlerinde kullanıldığında daha anlamlı olduğunu düşünenlerdenim.
Böylece sadece merge commit’inin başlığında görürüz kendilerini.
Yukarıdaki kötü örnekte bu şekilde yazılmış bir adet de merge commiti göreceksiniz.&lt;/p&gt;

&lt;h3 id=&quot;pair-programming&quot;&gt;Pair programming yaptığınız kişileri de mesaja dahil edin&lt;/h3&gt;

&lt;p&gt;Eğer pair programming gibi kodu iki kişinin birlikte yazdığı 
fakat klavyeyi tek bir kişinin kullandığı bir yöntem uyguluyorsanız,
birlikte çalıştığınız arkadaşınızın ismini de bir şekilde commit mesajına dahil edin.&lt;/p&gt;

&lt;p&gt;Bunu yapmak çok kolay.
Sadece üşenmeyip aşağıdakine benzer bir satırı commit mesajının sonuna ekleyebilirsiniz.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Co-authored-by: Foo Bar &amp;lt;foo.bar@example.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Veya birden fazla kişi ile birlikte çalışıyorsanız bunu iki satırda yapabilirsiniz:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Co-authored-by: Foo Bar &amp;lt;foo.bar@example.com&amp;gt;
Co-authored-by: John Bob &amp;lt;john.bob@example.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu şekilde çalışma arkadaşlarınıza da hak ettikleri krediyi vermiş olursunuz.&lt;/p&gt;

&lt;p&gt;Unutmayın ki kodu ne kadar oturup birlikte yazarsanız yazın
commit’i kimin hesabı ile yaparsanız tüm kodu o kişi yazmış gibi görünecektir.
Bu sebeple commit atarken birlikte çalıştığımız arkadaşlarımızı da unutmamak lazım.&lt;/p&gt;

&lt;h2 id=&quot;bitti&quot;&gt;Bitti&lt;/h2&gt;

&lt;p&gt;Bu yazıda yazdığım maddelerin büyük çoğunluğunu 
&lt;a href=&quot;https://chris.beams.io/&quot;&gt;Chris Beams&lt;/a&gt;‘in 2014 yılında yazdığı 
&lt;a href=&quot;https://chris.beams.io/posts/git-commit/&quot;&gt;How to Write a Git Commit Message&lt;/a&gt;
yazısından öğrendim. 
Bu yazı yıllardır web tarayıcımda yer imi olarak durmaktaydı.
Çalıştığım projelerde gelen Merge Request’leri gözden geçirirken
eğer kötü bir commit mesajı görürsem bu linki yapıştırırdım hemen yorum olarak.&lt;/p&gt;

&lt;p&gt;Bu yazıyı Türkçe şekliyle tekrar yazarak 
ve birlikte çalıştığım ekibimle kullandığımız 
veya kullanmayı arzuladığım pratikleri de dahil ederek 
ülkemizde üretilen yazılımların kalitesinde pozitif bir etki oluşturabilmek en büyük temennim.&lt;/p&gt;

&lt;p&gt;Kaliteli yazılımcı yaptığı işin dökümantasyonunu da iyi yapar.
Commit mesajları da bana göre en güzel dökümantasyon araçlarından biridir.&lt;/p&gt;

&lt;p&gt;Sağlıklı kalın.&lt;/p&gt;

&lt;h2 id=&quot;kaynaklar&quot;&gt;Kaynaklar&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://chris.beams.io/posts/git-commit/&quot;&gt;https://chris.beams.io/posts/git-commit/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://who-t.blogspot.com/2009/12/on-commit-messages.html&quot;&gt;http://who-t.blogspot.com/2009/12/on-commit-messages.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://corgibytes.com/blog/2019/03/20/commit-messages/&quot;&gt;https://corgibytes.com/blog/2019/03/20/commit-messages/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://yvonnickfrin.dev/a-guide-on-commit-messages&quot;&gt;https://yvonnickfrin.dev/a-guide-on-commit-messages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackernoon.com/power-up-your-pair-programming-with-co-authored-commits-on-github-ffb5d049aed3&quot;&gt;https://hackernoon.com/power-up-your-pair-programming-with-co-authored-commits-on-github-ffb5d049aed3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/en/github/committing-changes-to-your-project/creating-a-commit-with-multiple-authors&quot;&gt;https://help.github.com/en/github/committing-changes-to-your-project/creating-a-commit-with-multiple-authors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&quot;&gt;https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 19 Apr 2020 13:25:00 +0000</pubDate>
        <link>https://serdarkuzucu.com/2020/04/19/git-commit-mesaji-nasil-yazilmali/</link>
        <guid isPermaLink="true">https://serdarkuzucu.com/2020/04/19/git-commit-mesaji-nasil-yazilmali/</guid>
        
        
        <category>Git</category>
        
      </item>
    
  </channel>
</rss>
